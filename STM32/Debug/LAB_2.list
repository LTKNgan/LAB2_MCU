
LAB_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b04  0800010c  0800010c  0001010c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  08002c10  08002c10  00012c10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c3c  08002c3c  00020030  2**0
                  CONTENTS
  4 .ARM          00000000  08002c3c  08002c3c  00020030  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c3c  08002c3c  00020030  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c3c  08002c3c  00012c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002c40  08002c40  00012c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000030  20000000  08002c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  20000030  08002c74  00020030  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08002c74  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020030  2**0
                  CONTENTS, READONLY
 12 .debug_info   000087b3  00000000  00000000  00020059  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001624  00000000  00000000  0002880c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000998  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000008e0  00000000  00000000  0002a7c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016372  00000000  00000000  0002b0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009d3d  00000000  00000000  0004141a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082291  00000000  00000000  0004b157  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000cd3e8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002758  00000000  00000000  000cd43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	; (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	; (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	; (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000030 	.word	0x20000030
 8000128:	00000000 	.word	0x00000000
 800012c:	08002bf8 	.word	0x08002bf8

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	; (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	; (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	; (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000034 	.word	0x20000034
 8000148:	08002bf8 	.word	0x08002bf8

0800014c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000152:	f001 fa45 	bl	80015e0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000156:	f000 f89f 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_TIM2_Init();
 800015a:	f000 f8d9 	bl	8000310 <MX_TIM2_Init>
  MX_GPIO_Init();
 800015e:	f000 f923 	bl	80003a8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000162:	4842      	ldr	r0, [pc, #264]	; (800026c <main+0x120>)
 8000164:	f002 f984 	bl	8002470 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  setTimer1(100);
 8000168:	2064      	movs	r0, #100	; 0x64
 800016a:	f001 f907 	bl	800137c <setTimer1>
  setTimer2(25);
 800016e:	2019      	movs	r0, #25
 8000170:	f001 f918 	bl	80013a4 <setTimer2>
  setTimer3(50);
 8000174:	2032      	movs	r0, #50	; 0x32
 8000176:	f001 f929 	bl	80013cc <setTimer3>

  uint8_t letterA[8] = {0x00, 0x3F, 0x7F, 0xCC, 0xCC, 0x7F, 0x3F, 0x00};
 800017a:	4a3d      	ldr	r2, [pc, #244]	; (8000270 <main+0x124>)
 800017c:	1d3b      	adds	r3, r7, #4
 800017e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000182:	e883 0003 	stmia.w	r3, {r0, r1}

  displayLetter(letterA);
 8000186:	1d3b      	adds	r3, r7, #4
 8000188:	4618      	mov	r0, r3
 800018a:	f001 f8d1 	bl	8001330 <displayLetter>

  int index_col = 0;
 800018e:	2300      	movs	r3, #0
 8000190:	60fb      	str	r3, [r7, #12]
  while (1)
  {
	  if (timer1_flag)
 8000192:	4b38      	ldr	r3, [pc, #224]	; (8000274 <main+0x128>)
 8000194:	681b      	ldr	r3, [r3, #0]
 8000196:	2b00      	cmp	r3, #0
 8000198:	d02c      	beq.n	80001f4 <main+0xa8>
	  {
		  setTimer1(100);
 800019a:	2064      	movs	r0, #100	; 0x64
 800019c:	f001 f8ee 	bl	800137c <setTimer1>
		  sec++;
 80001a0:	4b35      	ldr	r3, [pc, #212]	; (8000278 <main+0x12c>)
 80001a2:	681b      	ldr	r3, [r3, #0]
 80001a4:	3301      	adds	r3, #1
 80001a6:	4a34      	ldr	r2, [pc, #208]	; (8000278 <main+0x12c>)
 80001a8:	6013      	str	r3, [r2, #0]
		  HAL_GPIO_TogglePin(DOT_GPIO_Port, DOT_Pin);
 80001aa:	2110      	movs	r1, #16
 80001ac:	4833      	ldr	r0, [pc, #204]	; (800027c <main+0x130>)
 80001ae:	f001 fd19 	bl	8001be4 <HAL_GPIO_TogglePin>
		  if (sec >= 60) {
 80001b2:	4b31      	ldr	r3, [pc, #196]	; (8000278 <main+0x12c>)
 80001b4:	681b      	ldr	r3, [r3, #0]
 80001b6:	2b3b      	cmp	r3, #59	; 0x3b
 80001b8:	dd07      	ble.n	80001ca <main+0x7e>
			  sec = 0;
 80001ba:	4b2f      	ldr	r3, [pc, #188]	; (8000278 <main+0x12c>)
 80001bc:	2200      	movs	r2, #0
 80001be:	601a      	str	r2, [r3, #0]
			  min++;
 80001c0:	4b2f      	ldr	r3, [pc, #188]	; (8000280 <main+0x134>)
 80001c2:	681b      	ldr	r3, [r3, #0]
 80001c4:	3301      	adds	r3, #1
 80001c6:	4a2e      	ldr	r2, [pc, #184]	; (8000280 <main+0x134>)
 80001c8:	6013      	str	r3, [r2, #0]
		  }

		  if(min >= 60) {
 80001ca:	4b2d      	ldr	r3, [pc, #180]	; (8000280 <main+0x134>)
 80001cc:	681b      	ldr	r3, [r3, #0]
 80001ce:	2b3b      	cmp	r3, #59	; 0x3b
 80001d0:	dd07      	ble.n	80001e2 <main+0x96>
			  min = 0;
 80001d2:	4b2b      	ldr	r3, [pc, #172]	; (8000280 <main+0x134>)
 80001d4:	2200      	movs	r2, #0
 80001d6:	601a      	str	r2, [r3, #0]
			  hour++;
 80001d8:	4b2a      	ldr	r3, [pc, #168]	; (8000284 <main+0x138>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	3301      	adds	r3, #1
 80001de:	4a29      	ldr	r2, [pc, #164]	; (8000284 <main+0x138>)
 80001e0:	6013      	str	r3, [r2, #0]
		  }

		  if(hour >=24) {
 80001e2:	4b28      	ldr	r3, [pc, #160]	; (8000284 <main+0x138>)
 80001e4:	681b      	ldr	r3, [r3, #0]
 80001e6:	2b17      	cmp	r3, #23
 80001e8:	dd02      	ble.n	80001f0 <main+0xa4>
			  hour = 0;
 80001ea:	4b26      	ldr	r3, [pc, #152]	; (8000284 <main+0x138>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	601a      	str	r2, [r3, #0]
		  }

		  updateClockBuffer();
 80001f0:	f000 fb78 	bl	80008e4 <updateClockBuffer>
	  }

	  if (timer2_flag)
 80001f4:	4b24      	ldr	r3, [pc, #144]	; (8000288 <main+0x13c>)
 80001f6:	681b      	ldr	r3, [r3, #0]
 80001f8:	2b00      	cmp	r3, #0
 80001fa:	d012      	beq.n	8000222 <main+0xd6>
	  {
		  setTimer2(25);
 80001fc:	2019      	movs	r0, #25
 80001fe:	f001 f8d1 	bl	80013a4 <setTimer2>
		  if (index_led >= MAX_LED) index_led = 0;
 8000202:	4b22      	ldr	r3, [pc, #136]	; (800028c <main+0x140>)
 8000204:	681b      	ldr	r3, [r3, #0]
 8000206:	2204      	movs	r2, #4
 8000208:	4293      	cmp	r3, r2
 800020a:	db02      	blt.n	8000212 <main+0xc6>
 800020c:	4b1f      	ldr	r3, [pc, #124]	; (800028c <main+0x140>)
 800020e:	2200      	movs	r2, #0
 8000210:	601a      	str	r2, [r3, #0]
		  update7SEG(index_led++);
 8000212:	4b1e      	ldr	r3, [pc, #120]	; (800028c <main+0x140>)
 8000214:	681b      	ldr	r3, [r3, #0]
 8000216:	1c5a      	adds	r2, r3, #1
 8000218:	491c      	ldr	r1, [pc, #112]	; (800028c <main+0x140>)
 800021a:	600a      	str	r2, [r1, #0]
 800021c:	4618      	mov	r0, r3
 800021e:	f000 fad5 	bl	80007cc <update7SEG>
	  }

	  if (timer3_flag)
 8000222:	4b1b      	ldr	r3, [pc, #108]	; (8000290 <main+0x144>)
 8000224:	681b      	ldr	r3, [r3, #0]
 8000226:	2b00      	cmp	r3, #0
 8000228:	d0b3      	beq.n	8000192 <main+0x46>
	  {
		  setTimer3(50);
 800022a:	2032      	movs	r0, #50	; 0x32
 800022c:	f001 f8ce 	bl	80013cc <setTimer3>
		  if (index_col >= MAX_LED_MATRIX) index_col = 0;
 8000230:	2208      	movs	r2, #8
 8000232:	68fb      	ldr	r3, [r7, #12]
 8000234:	4293      	cmp	r3, r2
 8000236:	db01      	blt.n	800023c <main+0xf0>
 8000238:	2300      	movs	r3, #0
 800023a:	60fb      	str	r3, [r7, #12]
		  if (index_matrix >= MAX_LED_MATRIX) index_matrix = 0;
 800023c:	4b15      	ldr	r3, [pc, #84]	; (8000294 <main+0x148>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	2208      	movs	r2, #8
 8000242:	4293      	cmp	r3, r2
 8000244:	db02      	blt.n	800024c <main+0x100>
 8000246:	4b13      	ldr	r3, [pc, #76]	; (8000294 <main+0x148>)
 8000248:	2200      	movs	r2, #0
 800024a:	601a      	str	r2, [r3, #0]
		  enableColM(index_col++);
 800024c:	68fb      	ldr	r3, [r7, #12]
 800024e:	1c5a      	adds	r2, r3, #1
 8000250:	60fa      	str	r2, [r7, #12]
 8000252:	4618      	mov	r0, r3
 8000254:	f000 fb86 	bl	8000964 <enableColM>
		  updateLEDMatrix(index_matrix++);
 8000258:	4b0e      	ldr	r3, [pc, #56]	; (8000294 <main+0x148>)
 800025a:	681b      	ldr	r3, [r3, #0]
 800025c:	1c5a      	adds	r2, r3, #1
 800025e:	490d      	ldr	r1, [pc, #52]	; (8000294 <main+0x148>)
 8000260:	600a      	str	r2, [r1, #0]
 8000262:	4618      	mov	r0, r3
 8000264:	f000 fd18 	bl	8000c98 <updateLEDMatrix>
	  if (timer1_flag)
 8000268:	e793      	b.n	8000192 <main+0x46>
 800026a:	bf00      	nop
 800026c:	2000006c 	.word	0x2000006c
 8000270:	08002c10 	.word	0x08002c10
 8000274:	20000054 	.word	0x20000054
 8000278:	20000018 	.word	0x20000018
 800027c:	40010800 	.word	0x40010800
 8000280:	20000014 	.word	0x20000014
 8000284:	20000010 	.word	0x20000010
 8000288:	2000005c 	.word	0x2000005c
 800028c:	2000004c 	.word	0x2000004c
 8000290:	20000064 	.word	0x20000064
 8000294:	20000050 	.word	0x20000050

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	b090      	sub	sp, #64	; 0x40
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	f107 0318 	add.w	r3, r7, #24
 80002a2:	2228      	movs	r2, #40	; 0x28
 80002a4:	2100      	movs	r1, #0
 80002a6:	4618      	mov	r0, r3
 80002a8:	f002 fc9e 	bl	8002be8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ac:	1d3b      	adds	r3, r7, #4
 80002ae:	2200      	movs	r2, #0
 80002b0:	601a      	str	r2, [r3, #0]
 80002b2:	605a      	str	r2, [r3, #4]
 80002b4:	609a      	str	r2, [r3, #8]
 80002b6:	60da      	str	r2, [r3, #12]
 80002b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002ba:	2302      	movs	r3, #2
 80002bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002be:	2301      	movs	r3, #1
 80002c0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002c2:	2310      	movs	r3, #16
 80002c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002c6:	2300      	movs	r3, #0
 80002c8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002ca:	f107 0318 	add.w	r3, r7, #24
 80002ce:	4618      	mov	r0, r3
 80002d0:	f001 fca2 	bl	8001c18 <HAL_RCC_OscConfig>
 80002d4:	4603      	mov	r3, r0
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d001      	beq.n	80002de <SystemClock_Config+0x46>
  {
    Error_Handler();
 80002da:	f001 f849 	bl	8001370 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002de:	230f      	movs	r3, #15
 80002e0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002e2:	2300      	movs	r3, #0
 80002e4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002ea:	2300      	movs	r3, #0
 80002ec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002ee:	2300      	movs	r3, #0
 80002f0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002f2:	1d3b      	adds	r3, r7, #4
 80002f4:	2100      	movs	r1, #0
 80002f6:	4618      	mov	r0, r3
 80002f8:	f001 ff0e 	bl	8002118 <HAL_RCC_ClockConfig>
 80002fc:	4603      	mov	r3, r0
 80002fe:	2b00      	cmp	r3, #0
 8000300:	d001      	beq.n	8000306 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000302:	f001 f835 	bl	8001370 <Error_Handler>
  }
}
 8000306:	bf00      	nop
 8000308:	3740      	adds	r7, #64	; 0x40
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
	...

08000310 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	b086      	sub	sp, #24
 8000314:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000316:	f107 0308 	add.w	r3, r7, #8
 800031a:	2200      	movs	r2, #0
 800031c:	601a      	str	r2, [r3, #0]
 800031e:	605a      	str	r2, [r3, #4]
 8000320:	609a      	str	r2, [r3, #8]
 8000322:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000324:	463b      	mov	r3, r7
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800032c:	4b1d      	ldr	r3, [pc, #116]	; (80003a4 <MX_TIM2_Init+0x94>)
 800032e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 7999;
 8000334:	4b1b      	ldr	r3, [pc, #108]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000336:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800033a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800033c:	4b19      	ldr	r3, [pc, #100]	; (80003a4 <MX_TIM2_Init+0x94>)
 800033e:	2200      	movs	r2, #0
 8000340:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8000342:	4b18      	ldr	r3, [pc, #96]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000344:	2209      	movs	r2, #9
 8000346:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000348:	4b16      	ldr	r3, [pc, #88]	; (80003a4 <MX_TIM2_Init+0x94>)
 800034a:	2200      	movs	r2, #0
 800034c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800034e:	4b15      	ldr	r3, [pc, #84]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000354:	4813      	ldr	r0, [pc, #76]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000356:	f002 f83b 	bl	80023d0 <HAL_TIM_Base_Init>
 800035a:	4603      	mov	r3, r0
 800035c:	2b00      	cmp	r3, #0
 800035e:	d001      	beq.n	8000364 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8000360:	f001 f806 	bl	8001370 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000364:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000368:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800036a:	f107 0308 	add.w	r3, r7, #8
 800036e:	4619      	mov	r1, r3
 8000370:	480c      	ldr	r0, [pc, #48]	; (80003a4 <MX_TIM2_Init+0x94>)
 8000372:	f002 f9d1 	bl	8002718 <HAL_TIM_ConfigClockSource>
 8000376:	4603      	mov	r3, r0
 8000378:	2b00      	cmp	r3, #0
 800037a:	d001      	beq.n	8000380 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800037c:	f000 fff8 	bl	8001370 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000380:	2300      	movs	r3, #0
 8000382:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000384:	2300      	movs	r3, #0
 8000386:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000388:	463b      	mov	r3, r7
 800038a:	4619      	mov	r1, r3
 800038c:	4805      	ldr	r0, [pc, #20]	; (80003a4 <MX_TIM2_Init+0x94>)
 800038e:	f002 fb9d 	bl	8002acc <HAL_TIMEx_MasterConfigSynchronization>
 8000392:	4603      	mov	r3, r0
 8000394:	2b00      	cmp	r3, #0
 8000396:	d001      	beq.n	800039c <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000398:	f000 ffea 	bl	8001370 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800039c:	bf00      	nop
 800039e:	3718      	adds	r7, #24
 80003a0:	46bd      	mov	sp, r7
 80003a2:	bd80      	pop	{r7, pc}
 80003a4:	2000006c 	.word	0x2000006c

080003a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a8:	b580      	push	{r7, lr}
 80003aa:	b086      	sub	sp, #24
 80003ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003ae:	f107 0308 	add.w	r3, r7, #8
 80003b2:	2200      	movs	r2, #0
 80003b4:	601a      	str	r2, [r3, #0]
 80003b6:	605a      	str	r2, [r3, #4]
 80003b8:	609a      	str	r2, [r3, #8]
 80003ba:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003bc:	4b22      	ldr	r3, [pc, #136]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003be:	699b      	ldr	r3, [r3, #24]
 80003c0:	4a21      	ldr	r2, [pc, #132]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003c2:	f043 0304 	orr.w	r3, r3, #4
 80003c6:	6193      	str	r3, [r2, #24]
 80003c8:	4b1f      	ldr	r3, [pc, #124]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003ca:	699b      	ldr	r3, [r3, #24]
 80003cc:	f003 0304 	and.w	r3, r3, #4
 80003d0:	607b      	str	r3, [r7, #4]
 80003d2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003d4:	4b1c      	ldr	r3, [pc, #112]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003d6:	699b      	ldr	r3, [r3, #24]
 80003d8:	4a1b      	ldr	r2, [pc, #108]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003da:	f043 0308 	orr.w	r3, r3, #8
 80003de:	6193      	str	r3, [r2, #24]
 80003e0:	4b19      	ldr	r3, [pc, #100]	; (8000448 <MX_GPIO_Init+0xa0>)
 80003e2:	699b      	ldr	r3, [r3, #24]
 80003e4:	f003 0308 	and.w	r3, r3, #8
 80003e8:	603b      	str	r3, [r7, #0]
 80003ea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ENM0_Pin|ENM1_Pin|DOT_Pin|RED_LED_Pin
 80003ec:	2200      	movs	r2, #0
 80003ee:	f64f 71fc 	movw	r1, #65532	; 0xfffc
 80003f2:	4816      	ldr	r0, [pc, #88]	; (800044c <MX_GPIO_Init+0xa4>)
 80003f4:	f001 fbde 	bl	8001bb4 <HAL_GPIO_WritePin>
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, sm_a_Pin|sm_b_Pin|sm_c_Pin|ROW2_Pin
 80003f8:	2201      	movs	r2, #1
 80003fa:	f64f 717f 	movw	r1, #65407	; 0xff7f
 80003fe:	4814      	ldr	r0, [pc, #80]	; (8000450 <MX_GPIO_Init+0xa8>)
 8000400:	f001 fbd8 	bl	8001bb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : ENM0_Pin ENM1_Pin DOT_Pin RED_LED_Pin
                           EN0_Pin EN1_Pin EN2_Pin EN3_Pin
                           ENM2_Pin ENM3_Pin ENM4_Pin ENM5_Pin
                           ENM6_Pin ENM7_Pin */
  GPIO_InitStruct.Pin = ENM0_Pin|ENM1_Pin|DOT_Pin|RED_LED_Pin
 8000404:	f64f 73fc 	movw	r3, #65532	; 0xfffc
 8000408:	60bb      	str	r3, [r7, #8]
                          |EN0_Pin|EN1_Pin|EN2_Pin|EN3_Pin
                          |ENM2_Pin|ENM3_Pin|ENM4_Pin|ENM5_Pin
                          |ENM6_Pin|ENM7_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800040a:	2301      	movs	r3, #1
 800040c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800040e:	2300      	movs	r3, #0
 8000410:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000412:	2302      	movs	r3, #2
 8000414:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000416:	f107 0308 	add.w	r3, r7, #8
 800041a:	4619      	mov	r1, r3
 800041c:	480b      	ldr	r0, [pc, #44]	; (800044c <MX_GPIO_Init+0xa4>)
 800041e:	f001 fa4f 	bl	80018c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : sm_a_Pin sm_b_Pin sm_c_Pin ROW2_Pin
                           ROW3_Pin ROW4_Pin ROW5_Pin ROW6_Pin
                           ROW7_Pin sm_d_Pin sm_e_Pin sm_f_Pin
                           sm_g_Pin ROW0_Pin ROW1_Pin */
  GPIO_InitStruct.Pin = sm_a_Pin|sm_b_Pin|sm_c_Pin|ROW2_Pin
 8000422:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000426:	60bb      	str	r3, [r7, #8]
                          |ROW3_Pin|ROW4_Pin|ROW5_Pin|ROW6_Pin
                          |ROW7_Pin|sm_d_Pin|sm_e_Pin|sm_f_Pin
                          |sm_g_Pin|ROW0_Pin|ROW1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000428:	2301      	movs	r3, #1
 800042a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042c:	2300      	movs	r3, #0
 800042e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000430:	2302      	movs	r3, #2
 8000432:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000434:	f107 0308 	add.w	r3, r7, #8
 8000438:	4619      	mov	r1, r3
 800043a:	4805      	ldr	r0, [pc, #20]	; (8000450 <MX_GPIO_Init+0xa8>)
 800043c:	f001 fa40 	bl	80018c0 <HAL_GPIO_Init>

}
 8000440:	bf00      	nop
 8000442:	3718      	adds	r7, #24
 8000444:	46bd      	mov	sp, r7
 8000446:	bd80      	pop	{r7, pc}
 8000448:	40021000 	.word	0x40021000
 800044c:	40010800 	.word	0x40010800
 8000450:	40010c00 	.word	0x40010c00

08000454 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
 800045a:	6078      	str	r0, [r7, #4]
	timerRun();
 800045c:	f000 ffca 	bl	80013f4 <timerRun>
}
 8000460:	bf00      	nop
 8000462:	3708      	adds	r7, #8
 8000464:	46bd      	mov	sp, r7
 8000466:	bd80      	pop	{r7, pc}

08000468 <display7SEG>:

void display7SEG(int num)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
 800046e:	6078      	str	r0, [r7, #4]
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	2b09      	cmp	r3, #9
 8000474:	f200 8180 	bhi.w	8000778 <display7SEG+0x310>
 8000478:	a201      	add	r2, pc, #4	; (adr r2, 8000480 <display7SEG+0x18>)
 800047a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800047e:	bf00      	nop
 8000480:	080004a9 	.word	0x080004a9
 8000484:	080004f1 	.word	0x080004f1
 8000488:	08000539 	.word	0x08000539
 800048c:	08000581 	.word	0x08000581
 8000490:	080005c9 	.word	0x080005c9
 8000494:	08000611 	.word	0x08000611
 8000498:	08000659 	.word	0x08000659
 800049c:	080006a1 	.word	0x080006a1
 80004a0:	080006e9 	.word	0x080006e9
 80004a4:	08000731 	.word	0x08000731
	switch (num)
	{
	case 0:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 80004a8:	2200      	movs	r2, #0
 80004aa:	2101      	movs	r1, #1
 80004ac:	48c6      	ldr	r0, [pc, #792]	; (80007c8 <display7SEG+0x360>)
 80004ae:	f001 fb81 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 80004b2:	2200      	movs	r2, #0
 80004b4:	2102      	movs	r1, #2
 80004b6:	48c4      	ldr	r0, [pc, #784]	; (80007c8 <display7SEG+0x360>)
 80004b8:	f001 fb7c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 80004bc:	2200      	movs	r2, #0
 80004be:	2104      	movs	r1, #4
 80004c0:	48c1      	ldr	r0, [pc, #772]	; (80007c8 <display7SEG+0x360>)
 80004c2:	f001 fb77 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 80004c6:	2200      	movs	r2, #0
 80004c8:	2108      	movs	r1, #8
 80004ca:	48bf      	ldr	r0, [pc, #764]	; (80007c8 <display7SEG+0x360>)
 80004cc:	f001 fb72 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_RESET);
 80004d0:	2200      	movs	r2, #0
 80004d2:	2110      	movs	r1, #16
 80004d4:	48bc      	ldr	r0, [pc, #752]	; (80007c8 <display7SEG+0x360>)
 80004d6:	f001 fb6d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 80004da:	2200      	movs	r2, #0
 80004dc:	2120      	movs	r1, #32
 80004de:	48ba      	ldr	r0, [pc, #744]	; (80007c8 <display7SEG+0x360>)
 80004e0:	f001 fb68 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_SET);
 80004e4:	2201      	movs	r2, #1
 80004e6:	2140      	movs	r1, #64	; 0x40
 80004e8:	48b7      	ldr	r0, [pc, #732]	; (80007c8 <display7SEG+0x360>)
 80004ea:	f001 fb63 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80004ee:	e167      	b.n	80007c0 <display7SEG+0x358>

	case 1:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_SET);
 80004f0:	2201      	movs	r2, #1
 80004f2:	2101      	movs	r1, #1
 80004f4:	48b4      	ldr	r0, [pc, #720]	; (80007c8 <display7SEG+0x360>)
 80004f6:	f001 fb5d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 80004fa:	2200      	movs	r2, #0
 80004fc:	2102      	movs	r1, #2
 80004fe:	48b2      	ldr	r0, [pc, #712]	; (80007c8 <display7SEG+0x360>)
 8000500:	f001 fb58 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 8000504:	2200      	movs	r2, #0
 8000506:	2104      	movs	r1, #4
 8000508:	48af      	ldr	r0, [pc, #700]	; (80007c8 <display7SEG+0x360>)
 800050a:	f001 fb53 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_SET);
 800050e:	2201      	movs	r2, #1
 8000510:	2108      	movs	r1, #8
 8000512:	48ad      	ldr	r0, [pc, #692]	; (80007c8 <display7SEG+0x360>)
 8000514:	f001 fb4e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 8000518:	2201      	movs	r2, #1
 800051a:	2110      	movs	r1, #16
 800051c:	48aa      	ldr	r0, [pc, #680]	; (80007c8 <display7SEG+0x360>)
 800051e:	f001 fb49 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_SET);
 8000522:	2201      	movs	r2, #1
 8000524:	2120      	movs	r1, #32
 8000526:	48a8      	ldr	r0, [pc, #672]	; (80007c8 <display7SEG+0x360>)
 8000528:	f001 fb44 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_SET);
 800052c:	2201      	movs	r2, #1
 800052e:	2140      	movs	r1, #64	; 0x40
 8000530:	48a5      	ldr	r0, [pc, #660]	; (80007c8 <display7SEG+0x360>)
 8000532:	f001 fb3f 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000536:	e143      	b.n	80007c0 <display7SEG+0x358>

	case 2:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 8000538:	2200      	movs	r2, #0
 800053a:	2101      	movs	r1, #1
 800053c:	48a2      	ldr	r0, [pc, #648]	; (80007c8 <display7SEG+0x360>)
 800053e:	f001 fb39 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 8000542:	2200      	movs	r2, #0
 8000544:	2102      	movs	r1, #2
 8000546:	48a0      	ldr	r0, [pc, #640]	; (80007c8 <display7SEG+0x360>)
 8000548:	f001 fb34 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_SET);
 800054c:	2201      	movs	r2, #1
 800054e:	2104      	movs	r1, #4
 8000550:	489d      	ldr	r0, [pc, #628]	; (80007c8 <display7SEG+0x360>)
 8000552:	f001 fb2f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 8000556:	2200      	movs	r2, #0
 8000558:	2108      	movs	r1, #8
 800055a:	489b      	ldr	r0, [pc, #620]	; (80007c8 <display7SEG+0x360>)
 800055c:	f001 fb2a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2110      	movs	r1, #16
 8000564:	4898      	ldr	r0, [pc, #608]	; (80007c8 <display7SEG+0x360>)
 8000566:	f001 fb25 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	2120      	movs	r1, #32
 800056e:	4896      	ldr	r0, [pc, #600]	; (80007c8 <display7SEG+0x360>)
 8000570:	f001 fb20 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 8000574:	2200      	movs	r2, #0
 8000576:	2140      	movs	r1, #64	; 0x40
 8000578:	4893      	ldr	r0, [pc, #588]	; (80007c8 <display7SEG+0x360>)
 800057a:	f001 fb1b 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 800057e:	e11f      	b.n	80007c0 <display7SEG+0x358>

	case 3:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 8000580:	2200      	movs	r2, #0
 8000582:	2101      	movs	r1, #1
 8000584:	4890      	ldr	r0, [pc, #576]	; (80007c8 <display7SEG+0x360>)
 8000586:	f001 fb15 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 800058a:	2200      	movs	r2, #0
 800058c:	2102      	movs	r1, #2
 800058e:	488e      	ldr	r0, [pc, #568]	; (80007c8 <display7SEG+0x360>)
 8000590:	f001 fb10 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 8000594:	2200      	movs	r2, #0
 8000596:	2104      	movs	r1, #4
 8000598:	488b      	ldr	r0, [pc, #556]	; (80007c8 <display7SEG+0x360>)
 800059a:	f001 fb0b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 800059e:	2200      	movs	r2, #0
 80005a0:	2108      	movs	r1, #8
 80005a2:	4889      	ldr	r0, [pc, #548]	; (80007c8 <display7SEG+0x360>)
 80005a4:	f001 fb06 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2110      	movs	r1, #16
 80005ac:	4886      	ldr	r0, [pc, #536]	; (80007c8 <display7SEG+0x360>)
 80005ae:	f001 fb01 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_SET);
 80005b2:	2201      	movs	r2, #1
 80005b4:	2120      	movs	r1, #32
 80005b6:	4884      	ldr	r0, [pc, #528]	; (80007c8 <display7SEG+0x360>)
 80005b8:	f001 fafc 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 80005bc:	2200      	movs	r2, #0
 80005be:	2140      	movs	r1, #64	; 0x40
 80005c0:	4881      	ldr	r0, [pc, #516]	; (80007c8 <display7SEG+0x360>)
 80005c2:	f001 faf7 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80005c6:	e0fb      	b.n	80007c0 <display7SEG+0x358>

	case 4:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_SET);
 80005c8:	2201      	movs	r2, #1
 80005ca:	2101      	movs	r1, #1
 80005cc:	487e      	ldr	r0, [pc, #504]	; (80007c8 <display7SEG+0x360>)
 80005ce:	f001 faf1 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 80005d2:	2200      	movs	r2, #0
 80005d4:	2102      	movs	r1, #2
 80005d6:	487c      	ldr	r0, [pc, #496]	; (80007c8 <display7SEG+0x360>)
 80005d8:	f001 faec 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 80005dc:	2200      	movs	r2, #0
 80005de:	2104      	movs	r1, #4
 80005e0:	4879      	ldr	r0, [pc, #484]	; (80007c8 <display7SEG+0x360>)
 80005e2:	f001 fae7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	2108      	movs	r1, #8
 80005ea:	4877      	ldr	r0, [pc, #476]	; (80007c8 <display7SEG+0x360>)
 80005ec:	f001 fae2 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 80005f0:	2201      	movs	r2, #1
 80005f2:	2110      	movs	r1, #16
 80005f4:	4874      	ldr	r0, [pc, #464]	; (80007c8 <display7SEG+0x360>)
 80005f6:	f001 fadd 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 80005fa:	2200      	movs	r2, #0
 80005fc:	2120      	movs	r1, #32
 80005fe:	4872      	ldr	r0, [pc, #456]	; (80007c8 <display7SEG+0x360>)
 8000600:	f001 fad8 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 8000604:	2200      	movs	r2, #0
 8000606:	2140      	movs	r1, #64	; 0x40
 8000608:	486f      	ldr	r0, [pc, #444]	; (80007c8 <display7SEG+0x360>)
 800060a:	f001 fad3 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 800060e:	e0d7      	b.n	80007c0 <display7SEG+0x358>

	case 5:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 8000610:	2200      	movs	r2, #0
 8000612:	2101      	movs	r1, #1
 8000614:	486c      	ldr	r0, [pc, #432]	; (80007c8 <display7SEG+0x360>)
 8000616:	f001 facd 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_SET);
 800061a:	2201      	movs	r2, #1
 800061c:	2102      	movs	r1, #2
 800061e:	486a      	ldr	r0, [pc, #424]	; (80007c8 <display7SEG+0x360>)
 8000620:	f001 fac8 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 8000624:	2200      	movs	r2, #0
 8000626:	2104      	movs	r1, #4
 8000628:	4867      	ldr	r0, [pc, #412]	; (80007c8 <display7SEG+0x360>)
 800062a:	f001 fac3 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 800062e:	2200      	movs	r2, #0
 8000630:	2108      	movs	r1, #8
 8000632:	4865      	ldr	r0, [pc, #404]	; (80007c8 <display7SEG+0x360>)
 8000634:	f001 fabe 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 8000638:	2201      	movs	r2, #1
 800063a:	2110      	movs	r1, #16
 800063c:	4862      	ldr	r0, [pc, #392]	; (80007c8 <display7SEG+0x360>)
 800063e:	f001 fab9 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	2120      	movs	r1, #32
 8000646:	4860      	ldr	r0, [pc, #384]	; (80007c8 <display7SEG+0x360>)
 8000648:	f001 fab4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 800064c:	2200      	movs	r2, #0
 800064e:	2140      	movs	r1, #64	; 0x40
 8000650:	485d      	ldr	r0, [pc, #372]	; (80007c8 <display7SEG+0x360>)
 8000652:	f001 faaf 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000656:	e0b3      	b.n	80007c0 <display7SEG+0x358>

	case 6:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 8000658:	2200      	movs	r2, #0
 800065a:	2101      	movs	r1, #1
 800065c:	485a      	ldr	r0, [pc, #360]	; (80007c8 <display7SEG+0x360>)
 800065e:	f001 faa9 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_SET);
 8000662:	2201      	movs	r2, #1
 8000664:	2102      	movs	r1, #2
 8000666:	4858      	ldr	r0, [pc, #352]	; (80007c8 <display7SEG+0x360>)
 8000668:	f001 faa4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2104      	movs	r1, #4
 8000670:	4855      	ldr	r0, [pc, #340]	; (80007c8 <display7SEG+0x360>)
 8000672:	f001 fa9f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 8000676:	2200      	movs	r2, #0
 8000678:	2108      	movs	r1, #8
 800067a:	4853      	ldr	r0, [pc, #332]	; (80007c8 <display7SEG+0x360>)
 800067c:	f001 fa9a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_RESET);
 8000680:	2200      	movs	r2, #0
 8000682:	2110      	movs	r1, #16
 8000684:	4850      	ldr	r0, [pc, #320]	; (80007c8 <display7SEG+0x360>)
 8000686:	f001 fa95 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 800068a:	2200      	movs	r2, #0
 800068c:	2120      	movs	r1, #32
 800068e:	484e      	ldr	r0, [pc, #312]	; (80007c8 <display7SEG+0x360>)
 8000690:	f001 fa90 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 8000694:	2200      	movs	r2, #0
 8000696:	2140      	movs	r1, #64	; 0x40
 8000698:	484b      	ldr	r0, [pc, #300]	; (80007c8 <display7SEG+0x360>)
 800069a:	f001 fa8b 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 800069e:	e08f      	b.n	80007c0 <display7SEG+0x358>

	case 7:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 80006a0:	2200      	movs	r2, #0
 80006a2:	2101      	movs	r1, #1
 80006a4:	4848      	ldr	r0, [pc, #288]	; (80007c8 <display7SEG+0x360>)
 80006a6:	f001 fa85 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2102      	movs	r1, #2
 80006ae:	4846      	ldr	r0, [pc, #280]	; (80007c8 <display7SEG+0x360>)
 80006b0:	f001 fa80 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 80006b4:	2200      	movs	r2, #0
 80006b6:	2104      	movs	r1, #4
 80006b8:	4843      	ldr	r0, [pc, #268]	; (80007c8 <display7SEG+0x360>)
 80006ba:	f001 fa7b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_SET);
 80006be:	2201      	movs	r2, #1
 80006c0:	2108      	movs	r1, #8
 80006c2:	4841      	ldr	r0, [pc, #260]	; (80007c8 <display7SEG+0x360>)
 80006c4:	f001 fa76 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 80006c8:	2201      	movs	r2, #1
 80006ca:	2110      	movs	r1, #16
 80006cc:	483e      	ldr	r0, [pc, #248]	; (80007c8 <display7SEG+0x360>)
 80006ce:	f001 fa71 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_SET);
 80006d2:	2201      	movs	r2, #1
 80006d4:	2120      	movs	r1, #32
 80006d6:	483c      	ldr	r0, [pc, #240]	; (80007c8 <display7SEG+0x360>)
 80006d8:	f001 fa6c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_SET);
 80006dc:	2201      	movs	r2, #1
 80006de:	2140      	movs	r1, #64	; 0x40
 80006e0:	4839      	ldr	r0, [pc, #228]	; (80007c8 <display7SEG+0x360>)
 80006e2:	f001 fa67 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80006e6:	e06b      	b.n	80007c0 <display7SEG+0x358>

	case 8:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 80006e8:	2200      	movs	r2, #0
 80006ea:	2101      	movs	r1, #1
 80006ec:	4836      	ldr	r0, [pc, #216]	; (80007c8 <display7SEG+0x360>)
 80006ee:	f001 fa61 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 80006f2:	2200      	movs	r2, #0
 80006f4:	2102      	movs	r1, #2
 80006f6:	4834      	ldr	r0, [pc, #208]	; (80007c8 <display7SEG+0x360>)
 80006f8:	f001 fa5c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 80006fc:	2200      	movs	r2, #0
 80006fe:	2104      	movs	r1, #4
 8000700:	4831      	ldr	r0, [pc, #196]	; (80007c8 <display7SEG+0x360>)
 8000702:	f001 fa57 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 8000706:	2200      	movs	r2, #0
 8000708:	2108      	movs	r1, #8
 800070a:	482f      	ldr	r0, [pc, #188]	; (80007c8 <display7SEG+0x360>)
 800070c:	f001 fa52 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_RESET);
 8000710:	2200      	movs	r2, #0
 8000712:	2110      	movs	r1, #16
 8000714:	482c      	ldr	r0, [pc, #176]	; (80007c8 <display7SEG+0x360>)
 8000716:	f001 fa4d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 800071a:	2200      	movs	r2, #0
 800071c:	2120      	movs	r1, #32
 800071e:	482a      	ldr	r0, [pc, #168]	; (80007c8 <display7SEG+0x360>)
 8000720:	f001 fa48 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 8000724:	2200      	movs	r2, #0
 8000726:	2140      	movs	r1, #64	; 0x40
 8000728:	4827      	ldr	r0, [pc, #156]	; (80007c8 <display7SEG+0x360>)
 800072a:	f001 fa43 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 800072e:	e047      	b.n	80007c0 <display7SEG+0x358>

	case 9:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_RESET);
 8000730:	2200      	movs	r2, #0
 8000732:	2101      	movs	r1, #1
 8000734:	4824      	ldr	r0, [pc, #144]	; (80007c8 <display7SEG+0x360>)
 8000736:	f001 fa3d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_RESET);
 800073a:	2200      	movs	r2, #0
 800073c:	2102      	movs	r1, #2
 800073e:	4822      	ldr	r0, [pc, #136]	; (80007c8 <display7SEG+0x360>)
 8000740:	f001 fa38 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_RESET);
 8000744:	2200      	movs	r2, #0
 8000746:	2104      	movs	r1, #4
 8000748:	481f      	ldr	r0, [pc, #124]	; (80007c8 <display7SEG+0x360>)
 800074a:	f001 fa33 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	481d      	ldr	r0, [pc, #116]	; (80007c8 <display7SEG+0x360>)
 8000754:	f001 fa2e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 8000758:	2201      	movs	r2, #1
 800075a:	2110      	movs	r1, #16
 800075c:	481a      	ldr	r0, [pc, #104]	; (80007c8 <display7SEG+0x360>)
 800075e:	f001 fa29 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	2120      	movs	r1, #32
 8000766:	4818      	ldr	r0, [pc, #96]	; (80007c8 <display7SEG+0x360>)
 8000768:	f001 fa24 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_RESET);
 800076c:	2200      	movs	r2, #0
 800076e:	2140      	movs	r1, #64	; 0x40
 8000770:	4815      	ldr	r0, [pc, #84]	; (80007c8 <display7SEG+0x360>)
 8000772:	f001 fa1f 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000776:	e023      	b.n	80007c0 <display7SEG+0x358>

	default:
		HAL_GPIO_WritePin(sm_a_GPIO_Port, sm_a_Pin, GPIO_PIN_SET);
 8000778:	2201      	movs	r2, #1
 800077a:	2101      	movs	r1, #1
 800077c:	4812      	ldr	r0, [pc, #72]	; (80007c8 <display7SEG+0x360>)
 800077e:	f001 fa19 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_b_GPIO_Port, sm_b_Pin, GPIO_PIN_SET);
 8000782:	2201      	movs	r2, #1
 8000784:	2102      	movs	r1, #2
 8000786:	4810      	ldr	r0, [pc, #64]	; (80007c8 <display7SEG+0x360>)
 8000788:	f001 fa14 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_c_GPIO_Port, sm_c_Pin, GPIO_PIN_SET);
 800078c:	2201      	movs	r2, #1
 800078e:	2104      	movs	r1, #4
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <display7SEG+0x360>)
 8000792:	f001 fa0f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_d_GPIO_Port, sm_d_Pin, GPIO_PIN_SET);
 8000796:	2201      	movs	r2, #1
 8000798:	2108      	movs	r1, #8
 800079a:	480b      	ldr	r0, [pc, #44]	; (80007c8 <display7SEG+0x360>)
 800079c:	f001 fa0a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_e_GPIO_Port, sm_e_Pin, GPIO_PIN_SET);
 80007a0:	2201      	movs	r2, #1
 80007a2:	2110      	movs	r1, #16
 80007a4:	4808      	ldr	r0, [pc, #32]	; (80007c8 <display7SEG+0x360>)
 80007a6:	f001 fa05 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_f_GPIO_Port, sm_f_Pin, GPIO_PIN_SET);
 80007aa:	2201      	movs	r2, #1
 80007ac:	2120      	movs	r1, #32
 80007ae:	4806      	ldr	r0, [pc, #24]	; (80007c8 <display7SEG+0x360>)
 80007b0:	f001 fa00 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(sm_g_GPIO_Port, sm_g_Pin, GPIO_PIN_SET);
 80007b4:	2201      	movs	r2, #1
 80007b6:	2140      	movs	r1, #64	; 0x40
 80007b8:	4803      	ldr	r0, [pc, #12]	; (80007c8 <display7SEG+0x360>)
 80007ba:	f001 f9fb 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80007be:	bf00      	nop
	}
}
 80007c0:	bf00      	nop
 80007c2:	3708      	adds	r7, #8
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}
 80007c8:	40010c00 	.word	0x40010c00

080007cc <update7SEG>:

void update7SEG(int index){
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2b03      	cmp	r3, #3
 80007d8:	d87a      	bhi.n	80008d0 <update7SEG+0x104>
 80007da:	a201      	add	r2, pc, #4	; (adr r2, 80007e0 <update7SEG+0x14>)
 80007dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007e0:	080007f1 	.word	0x080007f1
 80007e4:	08000829 	.word	0x08000829
 80007e8:	08000861 	.word	0x08000861
 80007ec:	08000899 	.word	0x08000899
    switch (index){
        case 0:
        	// enable led 0 and disable led 1, 2, 3
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	2140      	movs	r1, #64	; 0x40
 80007f4:	4839      	ldr	r0, [pc, #228]	; (80008dc <update7SEG+0x110>)
 80007f6:	f001 f9dd 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80007fa:	2201      	movs	r2, #1
 80007fc:	2180      	movs	r1, #128	; 0x80
 80007fe:	4837      	ldr	r0, [pc, #220]	; (80008dc <update7SEG+0x110>)
 8000800:	f001 f9d8 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 8000804:	2201      	movs	r2, #1
 8000806:	f44f 7180 	mov.w	r1, #256	; 0x100
 800080a:	4834      	ldr	r0, [pc, #208]	; (80008dc <update7SEG+0x110>)
 800080c:	f001 f9d2 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000810:	2201      	movs	r2, #1
 8000812:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000816:	4831      	ldr	r0, [pc, #196]	; (80008dc <update7SEG+0x110>)
 8000818:	f001 f9cc 	bl	8001bb4 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[0]);
 800081c:	4b30      	ldr	r3, [pc, #192]	; (80008e0 <update7SEG+0x114>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fe21 	bl	8000468 <display7SEG>
            break;
 8000826:	e054      	b.n	80008d2 <update7SEG+0x106>

        case 1:
        	// enable led 1 and disable led 0, 2, 3
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000828:	2201      	movs	r2, #1
 800082a:	2140      	movs	r1, #64	; 0x40
 800082c:	482b      	ldr	r0, [pc, #172]	; (80008dc <update7SEG+0x110>)
 800082e:	f001 f9c1 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_RESET);
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	4829      	ldr	r0, [pc, #164]	; (80008dc <update7SEG+0x110>)
 8000838:	f001 f9bc 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 800083c:	2201      	movs	r2, #1
 800083e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000842:	4826      	ldr	r0, [pc, #152]	; (80008dc <update7SEG+0x110>)
 8000844:	f001 f9b6 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000848:	2201      	movs	r2, #1
 800084a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800084e:	4823      	ldr	r0, [pc, #140]	; (80008dc <update7SEG+0x110>)
 8000850:	f001 f9b0 	bl	8001bb4 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[1]);
 8000854:	4b22      	ldr	r3, [pc, #136]	; (80008e0 <update7SEG+0x114>)
 8000856:	685b      	ldr	r3, [r3, #4]
 8000858:	4618      	mov	r0, r3
 800085a:	f7ff fe05 	bl	8000468 <display7SEG>
            break;
 800085e:	e038      	b.n	80008d2 <update7SEG+0x106>

        case 2:
        	// enable led 2 and disable led 0, 1, 3
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000860:	2201      	movs	r2, #1
 8000862:	2140      	movs	r1, #64	; 0x40
 8000864:	481d      	ldr	r0, [pc, #116]	; (80008dc <update7SEG+0x110>)
 8000866:	f001 f9a5 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 800086a:	2201      	movs	r2, #1
 800086c:	2180      	movs	r1, #128	; 0x80
 800086e:	481b      	ldr	r0, [pc, #108]	; (80008dc <update7SEG+0x110>)
 8000870:	f001 f9a0 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_RESET);
 8000874:	2200      	movs	r2, #0
 8000876:	f44f 7180 	mov.w	r1, #256	; 0x100
 800087a:	4818      	ldr	r0, [pc, #96]	; (80008dc <update7SEG+0x110>)
 800087c:	f001 f99a 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_SET);
 8000880:	2201      	movs	r2, #1
 8000882:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000886:	4815      	ldr	r0, [pc, #84]	; (80008dc <update7SEG+0x110>)
 8000888:	f001 f994 	bl	8001bb4 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[2]);
 800088c:	4b14      	ldr	r3, [pc, #80]	; (80008e0 <update7SEG+0x114>)
 800088e:	689b      	ldr	r3, [r3, #8]
 8000890:	4618      	mov	r0, r3
 8000892:	f7ff fde9 	bl	8000468 <display7SEG>
            break;
 8000896:	e01c      	b.n	80008d2 <update7SEG+0x106>

        case 3:
        	// enable led 3 and disable led 0, 1, 2
        	HAL_GPIO_WritePin(EN0_GPIO_Port, EN0_Pin, GPIO_PIN_SET);
 8000898:	2201      	movs	r2, #1
 800089a:	2140      	movs	r1, #64	; 0x40
 800089c:	480f      	ldr	r0, [pc, #60]	; (80008dc <update7SEG+0x110>)
 800089e:	f001 f989 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN1_GPIO_Port, EN1_Pin, GPIO_PIN_SET);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2180      	movs	r1, #128	; 0x80
 80008a6:	480d      	ldr	r0, [pc, #52]	; (80008dc <update7SEG+0x110>)
 80008a8:	f001 f984 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN2_GPIO_Port, EN2_Pin, GPIO_PIN_SET);
 80008ac:	2201      	movs	r2, #1
 80008ae:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008b2:	480a      	ldr	r0, [pc, #40]	; (80008dc <update7SEG+0x110>)
 80008b4:	f001 f97e 	bl	8001bb4 <HAL_GPIO_WritePin>
        	HAL_GPIO_WritePin(EN3_GPIO_Port, EN3_Pin, GPIO_PIN_RESET);
 80008b8:	2200      	movs	r2, #0
 80008ba:	f44f 7100 	mov.w	r1, #512	; 0x200
 80008be:	4807      	ldr	r0, [pc, #28]	; (80008dc <update7SEG+0x110>)
 80008c0:	f001 f978 	bl	8001bb4 <HAL_GPIO_WritePin>
            display7SEG(led_buffer[3]);
 80008c4:	4b06      	ldr	r3, [pc, #24]	; (80008e0 <update7SEG+0x114>)
 80008c6:	68db      	ldr	r3, [r3, #12]
 80008c8:	4618      	mov	r0, r3
 80008ca:	f7ff fdcd 	bl	8000468 <display7SEG>
            break;
 80008ce:	e000      	b.n	80008d2 <update7SEG+0x106>

        default:
            break;
 80008d0:	bf00      	nop
    }
}
 80008d2:	bf00      	nop
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	40010800 	.word	0x40010800
 80008e0:	20000000 	.word	0x20000000

080008e4 <updateClockBuffer>:


void updateClockBuffer()
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
	led_buffer[0] = hour/10;
 80008e8:	4b1a      	ldr	r3, [pc, #104]	; (8000954 <updateClockBuffer+0x70>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a1a      	ldr	r2, [pc, #104]	; (8000958 <updateClockBuffer+0x74>)
 80008ee:	fb82 1203 	smull	r1, r2, r2, r3
 80008f2:	1092      	asrs	r2, r2, #2
 80008f4:	17db      	asrs	r3, r3, #31
 80008f6:	1ad3      	subs	r3, r2, r3
 80008f8:	4a18      	ldr	r2, [pc, #96]	; (800095c <updateClockBuffer+0x78>)
 80008fa:	6013      	str	r3, [r2, #0]
	led_buffer[1] = hour%10;
 80008fc:	4b15      	ldr	r3, [pc, #84]	; (8000954 <updateClockBuffer+0x70>)
 80008fe:	6819      	ldr	r1, [r3, #0]
 8000900:	4b15      	ldr	r3, [pc, #84]	; (8000958 <updateClockBuffer+0x74>)
 8000902:	fb83 2301 	smull	r2, r3, r3, r1
 8000906:	109a      	asrs	r2, r3, #2
 8000908:	17cb      	asrs	r3, r1, #31
 800090a:	1ad2      	subs	r2, r2, r3
 800090c:	4613      	mov	r3, r2
 800090e:	009b      	lsls	r3, r3, #2
 8000910:	4413      	add	r3, r2
 8000912:	005b      	lsls	r3, r3, #1
 8000914:	1aca      	subs	r2, r1, r3
 8000916:	4b11      	ldr	r3, [pc, #68]	; (800095c <updateClockBuffer+0x78>)
 8000918:	605a      	str	r2, [r3, #4]
	led_buffer[2] = min/10;
 800091a:	4b11      	ldr	r3, [pc, #68]	; (8000960 <updateClockBuffer+0x7c>)
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	4a0e      	ldr	r2, [pc, #56]	; (8000958 <updateClockBuffer+0x74>)
 8000920:	fb82 1203 	smull	r1, r2, r2, r3
 8000924:	1092      	asrs	r2, r2, #2
 8000926:	17db      	asrs	r3, r3, #31
 8000928:	1ad3      	subs	r3, r2, r3
 800092a:	4a0c      	ldr	r2, [pc, #48]	; (800095c <updateClockBuffer+0x78>)
 800092c:	6093      	str	r3, [r2, #8]
	led_buffer[3] = min%10;
 800092e:	4b0c      	ldr	r3, [pc, #48]	; (8000960 <updateClockBuffer+0x7c>)
 8000930:	6819      	ldr	r1, [r3, #0]
 8000932:	4b09      	ldr	r3, [pc, #36]	; (8000958 <updateClockBuffer+0x74>)
 8000934:	fb83 2301 	smull	r2, r3, r3, r1
 8000938:	109a      	asrs	r2, r3, #2
 800093a:	17cb      	asrs	r3, r1, #31
 800093c:	1ad2      	subs	r2, r2, r3
 800093e:	4613      	mov	r3, r2
 8000940:	009b      	lsls	r3, r3, #2
 8000942:	4413      	add	r3, r2
 8000944:	005b      	lsls	r3, r3, #1
 8000946:	1aca      	subs	r2, r1, r3
 8000948:	4b04      	ldr	r3, [pc, #16]	; (800095c <updateClockBuffer+0x78>)
 800094a:	60da      	str	r2, [r3, #12]
}
 800094c:	bf00      	nop
 800094e:	46bd      	mov	sp, r7
 8000950:	bc80      	pop	{r7}
 8000952:	4770      	bx	lr
 8000954:	20000010 	.word	0x20000010
 8000958:	66666667 	.word	0x66666667
 800095c:	20000000 	.word	0x20000000
 8000960:	20000014 	.word	0x20000014

08000964 <enableColM>:

void enableColM(int index)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b082      	sub	sp, #8
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2b07      	cmp	r3, #7
 8000970:	f200 818c 	bhi.w	8000c8c <enableColM+0x328>
 8000974:	a201      	add	r2, pc, #4	; (adr r2, 800097c <enableColM+0x18>)
 8000976:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097a:	bf00      	nop
 800097c:	0800099d 	.word	0x0800099d
 8000980:	080009fb 	.word	0x080009fb
 8000984:	08000a59 	.word	0x08000a59
 8000988:	08000ab7 	.word	0x08000ab7
 800098c:	08000b15 	.word	0x08000b15
 8000990:	08000b73 	.word	0x08000b73
 8000994:	08000bd1 	.word	0x08000bd1
 8000998:	08000c2f 	.word	0x08000c2f
	switch (index)
	{
	case 0:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_SET);
 800099c:	2201      	movs	r2, #1
 800099e:	2104      	movs	r1, #4
 80009a0:	48bc      	ldr	r0, [pc, #752]	; (8000c94 <enableColM+0x330>)
 80009a2:	f001 f907 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 80009a6:	2200      	movs	r2, #0
 80009a8:	2108      	movs	r1, #8
 80009aa:	48ba      	ldr	r0, [pc, #744]	; (8000c94 <enableColM+0x330>)
 80009ac:	f001 f902 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 80009b0:	2200      	movs	r2, #0
 80009b2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80009b6:	48b7      	ldr	r0, [pc, #732]	; (8000c94 <enableColM+0x330>)
 80009b8:	f001 f8fc 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 80009bc:	2200      	movs	r2, #0
 80009be:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80009c2:	48b4      	ldr	r0, [pc, #720]	; (8000c94 <enableColM+0x330>)
 80009c4:	f001 f8f6 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 80009c8:	2200      	movs	r2, #0
 80009ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80009ce:	48b1      	ldr	r0, [pc, #708]	; (8000c94 <enableColM+0x330>)
 80009d0:	f001 f8f0 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 80009d4:	2200      	movs	r2, #0
 80009d6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009da:	48ae      	ldr	r0, [pc, #696]	; (8000c94 <enableColM+0x330>)
 80009dc:	f001 f8ea 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 80009e0:	2200      	movs	r2, #0
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	48ab      	ldr	r0, [pc, #684]	; (8000c94 <enableColM+0x330>)
 80009e8:	f001 f8e4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 80009ec:	2200      	movs	r2, #0
 80009ee:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009f2:	48a8      	ldr	r0, [pc, #672]	; (8000c94 <enableColM+0x330>)
 80009f4:	f001 f8de 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80009f8:	e148      	b.n	8000c8c <enableColM+0x328>

	case 1:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2104      	movs	r1, #4
 80009fe:	48a5      	ldr	r0, [pc, #660]	; (8000c94 <enableColM+0x330>)
 8000a00:	f001 f8d8 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_SET);
 8000a04:	2201      	movs	r2, #1
 8000a06:	2108      	movs	r1, #8
 8000a08:	48a2      	ldr	r0, [pc, #648]	; (8000c94 <enableColM+0x330>)
 8000a0a:	f001 f8d3 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a14:	489f      	ldr	r0, [pc, #636]	; (8000c94 <enableColM+0x330>)
 8000a16:	f001 f8cd 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a20:	489c      	ldr	r0, [pc, #624]	; (8000c94 <enableColM+0x330>)
 8000a22:	f001 f8c7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000a26:	2200      	movs	r2, #0
 8000a28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a2c:	4899      	ldr	r0, [pc, #612]	; (8000c94 <enableColM+0x330>)
 8000a2e:	f001 f8c1 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000a32:	2200      	movs	r2, #0
 8000a34:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a38:	4896      	ldr	r0, [pc, #600]	; (8000c94 <enableColM+0x330>)
 8000a3a:	f001 f8bb 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000a3e:	2200      	movs	r2, #0
 8000a40:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000a44:	4893      	ldr	r0, [pc, #588]	; (8000c94 <enableColM+0x330>)
 8000a46:	f001 f8b5 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000a50:	4890      	ldr	r0, [pc, #576]	; (8000c94 <enableColM+0x330>)
 8000a52:	f001 f8af 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000a56:	e119      	b.n	8000c8c <enableColM+0x328>

	case 2:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000a58:	2200      	movs	r2, #0
 8000a5a:	2104      	movs	r1, #4
 8000a5c:	488d      	ldr	r0, [pc, #564]	; (8000c94 <enableColM+0x330>)
 8000a5e:	f001 f8a9 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000a62:	2200      	movs	r2, #0
 8000a64:	2108      	movs	r1, #8
 8000a66:	488b      	ldr	r0, [pc, #556]	; (8000c94 <enableColM+0x330>)
 8000a68:	f001 f8a4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_SET);
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a72:	4888      	ldr	r0, [pc, #544]	; (8000c94 <enableColM+0x330>)
 8000a74:	f001 f89e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000a7e:	4885      	ldr	r0, [pc, #532]	; (8000c94 <enableColM+0x330>)
 8000a80:	f001 f898 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000a8a:	4882      	ldr	r0, [pc, #520]	; (8000c94 <enableColM+0x330>)
 8000a8c:	f001 f892 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a96:	487f      	ldr	r0, [pc, #508]	; (8000c94 <enableColM+0x330>)
 8000a98:	f001 f88c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000aa2:	487c      	ldr	r0, [pc, #496]	; (8000c94 <enableColM+0x330>)
 8000aa4:	f001 f886 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000aae:	4879      	ldr	r0, [pc, #484]	; (8000c94 <enableColM+0x330>)
 8000ab0:	f001 f880 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000ab4:	e0ea      	b.n	8000c8c <enableColM+0x328>

	case 3:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2104      	movs	r1, #4
 8000aba:	4876      	ldr	r0, [pc, #472]	; (8000c94 <enableColM+0x330>)
 8000abc:	f001 f87a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	2108      	movs	r1, #8
 8000ac4:	4873      	ldr	r0, [pc, #460]	; (8000c94 <enableColM+0x330>)
 8000ac6:	f001 f875 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000aca:	2200      	movs	r2, #0
 8000acc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad0:	4870      	ldr	r0, [pc, #448]	; (8000c94 <enableColM+0x330>)
 8000ad2:	f001 f86f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_SET);
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000adc:	486d      	ldr	r0, [pc, #436]	; (8000c94 <enableColM+0x330>)
 8000ade:	f001 f869 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ae8:	486a      	ldr	r0, [pc, #424]	; (8000c94 <enableColM+0x330>)
 8000aea:	f001 f863 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000aee:	2200      	movs	r2, #0
 8000af0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000af4:	4867      	ldr	r0, [pc, #412]	; (8000c94 <enableColM+0x330>)
 8000af6:	f001 f85d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000afa:	2200      	movs	r2, #0
 8000afc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b00:	4864      	ldr	r0, [pc, #400]	; (8000c94 <enableColM+0x330>)
 8000b02:	f001 f857 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000b06:	2200      	movs	r2, #0
 8000b08:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b0c:	4861      	ldr	r0, [pc, #388]	; (8000c94 <enableColM+0x330>)
 8000b0e:	f001 f851 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000b12:	e0bb      	b.n	8000c8c <enableColM+0x328>

	case 4:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2104      	movs	r1, #4
 8000b18:	485e      	ldr	r0, [pc, #376]	; (8000c94 <enableColM+0x330>)
 8000b1a:	f001 f84b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000b1e:	2200      	movs	r2, #0
 8000b20:	2108      	movs	r1, #8
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <enableColM+0x330>)
 8000b24:	f001 f846 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b2e:	4859      	ldr	r0, [pc, #356]	; (8000c94 <enableColM+0x330>)
 8000b30:	f001 f840 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000b34:	2200      	movs	r2, #0
 8000b36:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b3a:	4856      	ldr	r0, [pc, #344]	; (8000c94 <enableColM+0x330>)
 8000b3c:	f001 f83a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_SET);
 8000b40:	2201      	movs	r2, #1
 8000b42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000b46:	4853      	ldr	r0, [pc, #332]	; (8000c94 <enableColM+0x330>)
 8000b48:	f001 f834 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000b52:	4850      	ldr	r0, [pc, #320]	; (8000c94 <enableColM+0x330>)
 8000b54:	f001 f82e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b5e:	484d      	ldr	r0, [pc, #308]	; (8000c94 <enableColM+0x330>)
 8000b60:	f001 f828 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000b64:	2200      	movs	r2, #0
 8000b66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000b6a:	484a      	ldr	r0, [pc, #296]	; (8000c94 <enableColM+0x330>)
 8000b6c:	f001 f822 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000b70:	e08c      	b.n	8000c8c <enableColM+0x328>

	case 5:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	2104      	movs	r1, #4
 8000b76:	4847      	ldr	r0, [pc, #284]	; (8000c94 <enableColM+0x330>)
 8000b78:	f001 f81c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	2108      	movs	r1, #8
 8000b80:	4844      	ldr	r0, [pc, #272]	; (8000c94 <enableColM+0x330>)
 8000b82:	f001 f817 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000b86:	2200      	movs	r2, #0
 8000b88:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8c:	4841      	ldr	r0, [pc, #260]	; (8000c94 <enableColM+0x330>)
 8000b8e:	f001 f811 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000b92:	2200      	movs	r2, #0
 8000b94:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b98:	483e      	ldr	r0, [pc, #248]	; (8000c94 <enableColM+0x330>)
 8000b9a:	f001 f80b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ba4:	483b      	ldr	r0, [pc, #236]	; (8000c94 <enableColM+0x330>)
 8000ba6:	f001 f805 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_SET);
 8000baa:	2201      	movs	r2, #1
 8000bac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000bb0:	4838      	ldr	r0, [pc, #224]	; (8000c94 <enableColM+0x330>)
 8000bb2:	f000 ffff 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bbc:	4835      	ldr	r0, [pc, #212]	; (8000c94 <enableColM+0x330>)
 8000bbe:	f000 fff9 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bc8:	4832      	ldr	r0, [pc, #200]	; (8000c94 <enableColM+0x330>)
 8000bca:	f000 fff3 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000bce:	e05d      	b.n	8000c8c <enableColM+0x328>

	case 6:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2104      	movs	r1, #4
 8000bd4:	482f      	ldr	r0, [pc, #188]	; (8000c94 <enableColM+0x330>)
 8000bd6:	f000 ffed 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000bda:	2200      	movs	r2, #0
 8000bdc:	2108      	movs	r1, #8
 8000bde:	482d      	ldr	r0, [pc, #180]	; (8000c94 <enableColM+0x330>)
 8000be0:	f000 ffe8 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000bea:	482a      	ldr	r0, [pc, #168]	; (8000c94 <enableColM+0x330>)
 8000bec:	f000 ffe2 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000bf6:	4827      	ldr	r0, [pc, #156]	; (8000c94 <enableColM+0x330>)
 8000bf8:	f000 ffdc 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c02:	4824      	ldr	r0, [pc, #144]	; (8000c94 <enableColM+0x330>)
 8000c04:	f000 ffd6 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000c08:	2200      	movs	r2, #0
 8000c0a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0e:	4821      	ldr	r0, [pc, #132]	; (8000c94 <enableColM+0x330>)
 8000c10:	f000 ffd0 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_SET);
 8000c14:	2201      	movs	r2, #1
 8000c16:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c1a:	481e      	ldr	r0, [pc, #120]	; (8000c94 <enableColM+0x330>)
 8000c1c:	f000 ffca 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_RESET);
 8000c20:	2200      	movs	r2, #0
 8000c22:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c26:	481b      	ldr	r0, [pc, #108]	; (8000c94 <enableColM+0x330>)
 8000c28:	f000 ffc4 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000c2c:	e02e      	b.n	8000c8c <enableColM+0x328>

	case 7:
		HAL_GPIO_WritePin(ENM0_GPIO_Port, ENM0_Pin, GPIO_PIN_RESET);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2104      	movs	r1, #4
 8000c32:	4818      	ldr	r0, [pc, #96]	; (8000c94 <enableColM+0x330>)
 8000c34:	f000 ffbe 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM1_GPIO_Port, ENM1_Pin, GPIO_PIN_RESET);
 8000c38:	2200      	movs	r2, #0
 8000c3a:	2108      	movs	r1, #8
 8000c3c:	4815      	ldr	r0, [pc, #84]	; (8000c94 <enableColM+0x330>)
 8000c3e:	f000 ffb9 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM2_GPIO_Port, ENM2_Pin, GPIO_PIN_RESET);
 8000c42:	2200      	movs	r2, #0
 8000c44:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c48:	4812      	ldr	r0, [pc, #72]	; (8000c94 <enableColM+0x330>)
 8000c4a:	f000 ffb3 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM3_GPIO_Port, ENM3_Pin, GPIO_PIN_RESET);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000c54:	480f      	ldr	r0, [pc, #60]	; (8000c94 <enableColM+0x330>)
 8000c56:	f000 ffad 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM4_GPIO_Port, ENM4_Pin, GPIO_PIN_RESET);
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c60:	480c      	ldr	r0, [pc, #48]	; (8000c94 <enableColM+0x330>)
 8000c62:	f000 ffa7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM5_GPIO_Port, ENM5_Pin, GPIO_PIN_RESET);
 8000c66:	2200      	movs	r2, #0
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4809      	ldr	r0, [pc, #36]	; (8000c94 <enableColM+0x330>)
 8000c6e:	f000 ffa1 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM6_GPIO_Port, ENM6_Pin, GPIO_PIN_RESET);
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <enableColM+0x330>)
 8000c7a:	f000 ff9b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ENM7_GPIO_Port, ENM7_Pin, GPIO_PIN_SET);
 8000c7e:	2201      	movs	r2, #1
 8000c80:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000c84:	4803      	ldr	r0, [pc, #12]	; (8000c94 <enableColM+0x330>)
 8000c86:	f000 ff95 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000c8a:	bf00      	nop
	}
}
 8000c8c:	bf00      	nop
 8000c8e:	3708      	adds	r7, #8
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40010800 	.word	0x40010800

08000c98 <updateLEDMatrix>:

void updateLEDMatrix(int index)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	2b07      	cmp	r3, #7
 8000ca4:	f200 833c 	bhi.w	8001320 <updateLEDMatrix+0x688>
 8000ca8:	a201      	add	r2, pc, #4	; (adr r2, 8000cb0 <updateLEDMatrix+0x18>)
 8000caa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000cae:	bf00      	nop
 8000cb0:	08000cd1 	.word	0x08000cd1
 8000cb4:	08000d99 	.word	0x08000d99
 8000cb8:	08000e61 	.word	0x08000e61
 8000cbc:	08000f31 	.word	0x08000f31
 8000cc0:	08000ff9 	.word	0x08000ff9
 8000cc4:	080010c1 	.word	0x080010c1
 8000cc8:	08001191 	.word	0x08001191
 8000ccc:	08001259 	.word	0x08001259
	switch (index)
	{
	case 0:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[0] >> 7) & 0x01));
 8000cd0:	4b95      	ldr	r3, [pc, #596]	; (8000f28 <updateLEDMatrix+0x290>)
 8000cd2:	781b      	ldrb	r3, [r3, #0]
 8000cd4:	09db      	lsrs	r3, r3, #7
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000cde:	4893      	ldr	r0, [pc, #588]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ce0:	f000 ff68 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[0] >> 6) & 0x01));
 8000ce4:	4b90      	ldr	r3, [pc, #576]	; (8000f28 <updateLEDMatrix+0x290>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	099b      	lsrs	r3, r3, #6
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	f003 0301 	and.w	r3, r3, #1
 8000cf0:	b2db      	uxtb	r3, r3
 8000cf2:	461a      	mov	r2, r3
 8000cf4:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000cf8:	488c      	ldr	r0, [pc, #560]	; (8000f2c <updateLEDMatrix+0x294>)
 8000cfa:	f000 ff5b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[0] >> 5) & 0x01));
 8000cfe:	4b8a      	ldr	r3, [pc, #552]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d00:	781b      	ldrb	r3, [r3, #0]
 8000d02:	095b      	lsrs	r3, r3, #5
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	b2db      	uxtb	r3, r3
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d12:	4886      	ldr	r0, [pc, #536]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d14:	f000 ff4e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[0] >> 4) & 0x01));
 8000d18:	4b83      	ldr	r3, [pc, #524]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d1a:	781b      	ldrb	r3, [r3, #0]
 8000d1c:	091b      	lsrs	r3, r3, #4
 8000d1e:	b2db      	uxtb	r3, r3
 8000d20:	f003 0301 	and.w	r3, r3, #1
 8000d24:	b2db      	uxtb	r3, r3
 8000d26:	461a      	mov	r2, r3
 8000d28:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000d2c:	487f      	ldr	r0, [pc, #508]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d2e:	f000 ff41 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[0] >> 3) & 0x01));
 8000d32:	4b7d      	ldr	r3, [pc, #500]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	08db      	lsrs	r3, r3, #3
 8000d38:	b2db      	uxtb	r3, r3
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	b2db      	uxtb	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000d46:	4879      	ldr	r0, [pc, #484]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d48:	f000 ff34 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[0] >> 2) & 0x01));
 8000d4c:	4b76      	ldr	r3, [pc, #472]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d4e:	781b      	ldrb	r3, [r3, #0]
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	f003 0301 	and.w	r3, r3, #1
 8000d58:	b2db      	uxtb	r3, r3
 8000d5a:	461a      	mov	r2, r3
 8000d5c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000d60:	4872      	ldr	r0, [pc, #456]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d62:	f000 ff27 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[0] >> 1) & 0x01));
 8000d66:	4b70      	ldr	r3, [pc, #448]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	085b      	lsrs	r3, r3, #1
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	461a      	mov	r2, r3
 8000d76:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000d7a:	486c      	ldr	r0, [pc, #432]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d7c:	f000 ff1a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[0]) & 0x01));
 8000d80:	4b69      	ldr	r3, [pc, #420]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d82:	781b      	ldrb	r3, [r3, #0]
 8000d84:	f003 0301 	and.w	r3, r3, #1
 8000d88:	b2db      	uxtb	r3, r3
 8000d8a:	461a      	mov	r2, r3
 8000d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d90:	4866      	ldr	r0, [pc, #408]	; (8000f2c <updateLEDMatrix+0x294>)
 8000d92:	f000 ff0f 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000d96:	e2c3      	b.n	8001320 <updateLEDMatrix+0x688>

	case 1:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[1] >> 7) & 0x01));
 8000d98:	4b63      	ldr	r3, [pc, #396]	; (8000f28 <updateLEDMatrix+0x290>)
 8000d9a:	785b      	ldrb	r3, [r3, #1]
 8000d9c:	09db      	lsrs	r3, r3, #7
 8000d9e:	b2db      	uxtb	r3, r3
 8000da0:	461a      	mov	r2, r3
 8000da2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000da6:	4861      	ldr	r0, [pc, #388]	; (8000f2c <updateLEDMatrix+0x294>)
 8000da8:	f000 ff04 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[1] >> 6) & 0x01));
 8000dac:	4b5e      	ldr	r3, [pc, #376]	; (8000f28 <updateLEDMatrix+0x290>)
 8000dae:	785b      	ldrb	r3, [r3, #1]
 8000db0:	099b      	lsrs	r3, r3, #6
 8000db2:	b2db      	uxtb	r3, r3
 8000db4:	f003 0301 	and.w	r3, r3, #1
 8000db8:	b2db      	uxtb	r3, r3
 8000dba:	461a      	mov	r2, r3
 8000dbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000dc0:	485a      	ldr	r0, [pc, #360]	; (8000f2c <updateLEDMatrix+0x294>)
 8000dc2:	f000 fef7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[1] >> 5) & 0x01));
 8000dc6:	4b58      	ldr	r3, [pc, #352]	; (8000f28 <updateLEDMatrix+0x290>)
 8000dc8:	785b      	ldrb	r3, [r3, #1]
 8000dca:	095b      	lsrs	r3, r3, #5
 8000dcc:	b2db      	uxtb	r3, r3
 8000dce:	f003 0301 	and.w	r3, r3, #1
 8000dd2:	b2db      	uxtb	r3, r3
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000dda:	4854      	ldr	r0, [pc, #336]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ddc:	f000 feea 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[1] >> 4) & 0x01));
 8000de0:	4b51      	ldr	r3, [pc, #324]	; (8000f28 <updateLEDMatrix+0x290>)
 8000de2:	785b      	ldrb	r3, [r3, #1]
 8000de4:	091b      	lsrs	r3, r3, #4
 8000de6:	b2db      	uxtb	r3, r3
 8000de8:	f003 0301 	and.w	r3, r3, #1
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	461a      	mov	r2, r3
 8000df0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000df4:	484d      	ldr	r0, [pc, #308]	; (8000f2c <updateLEDMatrix+0x294>)
 8000df6:	f000 fedd 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[1] >> 3) & 0x01));
 8000dfa:	4b4b      	ldr	r3, [pc, #300]	; (8000f28 <updateLEDMatrix+0x290>)
 8000dfc:	785b      	ldrb	r3, [r3, #1]
 8000dfe:	08db      	lsrs	r3, r3, #3
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	f003 0301 	and.w	r3, r3, #1
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	461a      	mov	r2, r3
 8000e0a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000e0e:	4847      	ldr	r0, [pc, #284]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e10:	f000 fed0 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[1] >> 2) & 0x01));
 8000e14:	4b44      	ldr	r3, [pc, #272]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e16:	785b      	ldrb	r3, [r3, #1]
 8000e18:	089b      	lsrs	r3, r3, #2
 8000e1a:	b2db      	uxtb	r3, r3
 8000e1c:	f003 0301 	and.w	r3, r3, #1
 8000e20:	b2db      	uxtb	r3, r3
 8000e22:	461a      	mov	r2, r3
 8000e24:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e28:	4840      	ldr	r0, [pc, #256]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e2a:	f000 fec3 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[1] >> 1) & 0x01));
 8000e2e:	4b3e      	ldr	r3, [pc, #248]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e30:	785b      	ldrb	r3, [r3, #1]
 8000e32:	085b      	lsrs	r3, r3, #1
 8000e34:	b2db      	uxtb	r3, r3
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	b2db      	uxtb	r3, r3
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000e42:	483a      	ldr	r0, [pc, #232]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e44:	f000 feb6 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[1]) & 0x01));
 8000e48:	4b37      	ldr	r3, [pc, #220]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e4a:	785b      	ldrb	r3, [r3, #1]
 8000e4c:	f003 0301 	and.w	r3, r3, #1
 8000e50:	b2db      	uxtb	r3, r3
 8000e52:	461a      	mov	r2, r3
 8000e54:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e58:	4834      	ldr	r0, [pc, #208]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e5a:	f000 feab 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000e5e:	e25f      	b.n	8001320 <updateLEDMatrix+0x688>

	case 2:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[2] >> 7) & 0x01));
 8000e60:	4b31      	ldr	r3, [pc, #196]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e62:	789b      	ldrb	r3, [r3, #2]
 8000e64:	09db      	lsrs	r3, r3, #7
 8000e66:	b2db      	uxtb	r3, r3
 8000e68:	461a      	mov	r2, r3
 8000e6a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000e6e:	482f      	ldr	r0, [pc, #188]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e70:	f000 fea0 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[2] >> 6) & 0x01));
 8000e74:	4b2c      	ldr	r3, [pc, #176]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e76:	789b      	ldrb	r3, [r3, #2]
 8000e78:	099b      	lsrs	r3, r3, #6
 8000e7a:	b2db      	uxtb	r3, r3
 8000e7c:	f003 0301 	and.w	r3, r3, #1
 8000e80:	b2db      	uxtb	r3, r3
 8000e82:	461a      	mov	r2, r3
 8000e84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000e88:	4828      	ldr	r0, [pc, #160]	; (8000f2c <updateLEDMatrix+0x294>)
 8000e8a:	f000 fe93 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[2] >> 5) & 0x01));
 8000e8e:	4b26      	ldr	r3, [pc, #152]	; (8000f28 <updateLEDMatrix+0x290>)
 8000e90:	789b      	ldrb	r3, [r3, #2]
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f003 0301 	and.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ea2:	4822      	ldr	r0, [pc, #136]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ea4:	f000 fe86 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[2] >> 4) & 0x01));
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <updateLEDMatrix+0x290>)
 8000eaa:	789b      	ldrb	r3, [r3, #2]
 8000eac:	091b      	lsrs	r3, r3, #4
 8000eae:	b2db      	uxtb	r3, r3
 8000eb0:	f003 0301 	and.w	r3, r3, #1
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	461a      	mov	r2, r3
 8000eb8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000ebc:	481b      	ldr	r0, [pc, #108]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ebe:	f000 fe79 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[2] >> 3) & 0x01));
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <updateLEDMatrix+0x290>)
 8000ec4:	789b      	ldrb	r3, [r3, #2]
 8000ec6:	08db      	lsrs	r3, r3, #3
 8000ec8:	b2db      	uxtb	r3, r3
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	461a      	mov	r2, r3
 8000ed2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ed6:	4815      	ldr	r0, [pc, #84]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ed8:	f000 fe6c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[2] >> 2) & 0x01));
 8000edc:	4b12      	ldr	r3, [pc, #72]	; (8000f28 <updateLEDMatrix+0x290>)
 8000ede:	789b      	ldrb	r3, [r3, #2]
 8000ee0:	089b      	lsrs	r3, r3, #2
 8000ee2:	b2db      	uxtb	r3, r3
 8000ee4:	f003 0301 	and.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	461a      	mov	r2, r3
 8000eec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ef0:	480e      	ldr	r0, [pc, #56]	; (8000f2c <updateLEDMatrix+0x294>)
 8000ef2:	f000 fe5f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[2] >> 1) & 0x01));
 8000ef6:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <updateLEDMatrix+0x290>)
 8000ef8:	789b      	ldrb	r3, [r3, #2]
 8000efa:	085b      	lsrs	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	f003 0301 	and.w	r3, r3, #1
 8000f02:	b2db      	uxtb	r3, r3
 8000f04:	461a      	mov	r2, r3
 8000f06:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000f0a:	4808      	ldr	r0, [pc, #32]	; (8000f2c <updateLEDMatrix+0x294>)
 8000f0c:	f000 fe52 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[2]) & 0x01));
 8000f10:	4b05      	ldr	r3, [pc, #20]	; (8000f28 <updateLEDMatrix+0x290>)
 8000f12:	789b      	ldrb	r3, [r3, #2]
 8000f14:	f003 0301 	and.w	r3, r3, #1
 8000f18:	b2db      	uxtb	r3, r3
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <updateLEDMatrix+0x294>)
 8000f22:	f000 fe47 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000f26:	e1fb      	b.n	8001320 <updateLEDMatrix+0x688>
 8000f28:	2000001c 	.word	0x2000001c
 8000f2c:	40010c00 	.word	0x40010c00

	case 3:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[3] >> 7) & 0x01));
 8000f30:	4b95      	ldr	r3, [pc, #596]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000f32:	78db      	ldrb	r3, [r3, #3]
 8000f34:	09db      	lsrs	r3, r3, #7
 8000f36:	b2db      	uxtb	r3, r3
 8000f38:	461a      	mov	r2, r3
 8000f3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000f3e:	4893      	ldr	r0, [pc, #588]	; (800118c <updateLEDMatrix+0x4f4>)
 8000f40:	f000 fe38 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[3] >> 6) & 0x01));
 8000f44:	4b90      	ldr	r3, [pc, #576]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000f46:	78db      	ldrb	r3, [r3, #3]
 8000f48:	099b      	lsrs	r3, r3, #6
 8000f4a:	b2db      	uxtb	r3, r3
 8000f4c:	f003 0301 	and.w	r3, r3, #1
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	461a      	mov	r2, r3
 8000f54:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000f58:	488c      	ldr	r0, [pc, #560]	; (800118c <updateLEDMatrix+0x4f4>)
 8000f5a:	f000 fe2b 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[3] >> 5) & 0x01));
 8000f5e:	4b8a      	ldr	r3, [pc, #552]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000f60:	78db      	ldrb	r3, [r3, #3]
 8000f62:	095b      	lsrs	r3, r3, #5
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f003 0301 	and.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	461a      	mov	r2, r3
 8000f6e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000f72:	4886      	ldr	r0, [pc, #536]	; (800118c <updateLEDMatrix+0x4f4>)
 8000f74:	f000 fe1e 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[3] >> 4) & 0x01));
 8000f78:	4b83      	ldr	r3, [pc, #524]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000f7a:	78db      	ldrb	r3, [r3, #3]
 8000f7c:	091b      	lsrs	r3, r3, #4
 8000f7e:	b2db      	uxtb	r3, r3
 8000f80:	f003 0301 	and.w	r3, r3, #1
 8000f84:	b2db      	uxtb	r3, r3
 8000f86:	461a      	mov	r2, r3
 8000f88:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000f8c:	487f      	ldr	r0, [pc, #508]	; (800118c <updateLEDMatrix+0x4f4>)
 8000f8e:	f000 fe11 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[3] >> 3) & 0x01));
 8000f92:	4b7d      	ldr	r3, [pc, #500]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000f94:	78db      	ldrb	r3, [r3, #3]
 8000f96:	08db      	lsrs	r3, r3, #3
 8000f98:	b2db      	uxtb	r3, r3
 8000f9a:	f003 0301 	and.w	r3, r3, #1
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	461a      	mov	r2, r3
 8000fa2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000fa6:	4879      	ldr	r0, [pc, #484]	; (800118c <updateLEDMatrix+0x4f4>)
 8000fa8:	f000 fe04 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[3] >> 2) & 0x01));
 8000fac:	4b76      	ldr	r3, [pc, #472]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000fae:	78db      	ldrb	r3, [r3, #3]
 8000fb0:	089b      	lsrs	r3, r3, #2
 8000fb2:	b2db      	uxtb	r3, r3
 8000fb4:	f003 0301 	and.w	r3, r3, #1
 8000fb8:	b2db      	uxtb	r3, r3
 8000fba:	461a      	mov	r2, r3
 8000fbc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000fc0:	4872      	ldr	r0, [pc, #456]	; (800118c <updateLEDMatrix+0x4f4>)
 8000fc2:	f000 fdf7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[3] >> 1) & 0x01));
 8000fc6:	4b70      	ldr	r3, [pc, #448]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000fc8:	78db      	ldrb	r3, [r3, #3]
 8000fca:	085b      	lsrs	r3, r3, #1
 8000fcc:	b2db      	uxtb	r3, r3
 8000fce:	f003 0301 	and.w	r3, r3, #1
 8000fd2:	b2db      	uxtb	r3, r3
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000fda:	486c      	ldr	r0, [pc, #432]	; (800118c <updateLEDMatrix+0x4f4>)
 8000fdc:	f000 fdea 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[3]) & 0x01));
 8000fe0:	4b69      	ldr	r3, [pc, #420]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000fe2:	78db      	ldrb	r3, [r3, #3]
 8000fe4:	f003 0301 	and.w	r3, r3, #1
 8000fe8:	b2db      	uxtb	r3, r3
 8000fea:	461a      	mov	r2, r3
 8000fec:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ff0:	4866      	ldr	r0, [pc, #408]	; (800118c <updateLEDMatrix+0x4f4>)
 8000ff2:	f000 fddf 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8000ff6:	e193      	b.n	8001320 <updateLEDMatrix+0x688>

	case 4:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[4] >> 7) & 0x01));
 8000ff8:	4b63      	ldr	r3, [pc, #396]	; (8001188 <updateLEDMatrix+0x4f0>)
 8000ffa:	791b      	ldrb	r3, [r3, #4]
 8000ffc:	09db      	lsrs	r3, r3, #7
 8000ffe:	b2db      	uxtb	r3, r3
 8001000:	461a      	mov	r2, r3
 8001002:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001006:	4861      	ldr	r0, [pc, #388]	; (800118c <updateLEDMatrix+0x4f4>)
 8001008:	f000 fdd4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[4] >> 6) & 0x01));
 800100c:	4b5e      	ldr	r3, [pc, #376]	; (8001188 <updateLEDMatrix+0x4f0>)
 800100e:	791b      	ldrb	r3, [r3, #4]
 8001010:	099b      	lsrs	r3, r3, #6
 8001012:	b2db      	uxtb	r3, r3
 8001014:	f003 0301 	and.w	r3, r3, #1
 8001018:	b2db      	uxtb	r3, r3
 800101a:	461a      	mov	r2, r3
 800101c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001020:	485a      	ldr	r0, [pc, #360]	; (800118c <updateLEDMatrix+0x4f4>)
 8001022:	f000 fdc7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[4] >> 5) & 0x01));
 8001026:	4b58      	ldr	r3, [pc, #352]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001028:	791b      	ldrb	r3, [r3, #4]
 800102a:	095b      	lsrs	r3, r3, #5
 800102c:	b2db      	uxtb	r3, r3
 800102e:	f003 0301 	and.w	r3, r3, #1
 8001032:	b2db      	uxtb	r3, r3
 8001034:	461a      	mov	r2, r3
 8001036:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800103a:	4854      	ldr	r0, [pc, #336]	; (800118c <updateLEDMatrix+0x4f4>)
 800103c:	f000 fdba 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[4] >> 4) & 0x01));
 8001040:	4b51      	ldr	r3, [pc, #324]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001042:	791b      	ldrb	r3, [r3, #4]
 8001044:	091b      	lsrs	r3, r3, #4
 8001046:	b2db      	uxtb	r3, r3
 8001048:	f003 0301 	and.w	r3, r3, #1
 800104c:	b2db      	uxtb	r3, r3
 800104e:	461a      	mov	r2, r3
 8001050:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8001054:	484d      	ldr	r0, [pc, #308]	; (800118c <updateLEDMatrix+0x4f4>)
 8001056:	f000 fdad 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[4] >> 3) & 0x01));
 800105a:	4b4b      	ldr	r3, [pc, #300]	; (8001188 <updateLEDMatrix+0x4f0>)
 800105c:	791b      	ldrb	r3, [r3, #4]
 800105e:	08db      	lsrs	r3, r3, #3
 8001060:	b2db      	uxtb	r3, r3
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	b2db      	uxtb	r3, r3
 8001068:	461a      	mov	r2, r3
 800106a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800106e:	4847      	ldr	r0, [pc, #284]	; (800118c <updateLEDMatrix+0x4f4>)
 8001070:	f000 fda0 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[4] >> 2) & 0x01));
 8001074:	4b44      	ldr	r3, [pc, #272]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001076:	791b      	ldrb	r3, [r3, #4]
 8001078:	089b      	lsrs	r3, r3, #2
 800107a:	b2db      	uxtb	r3, r3
 800107c:	f003 0301 	and.w	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	461a      	mov	r2, r3
 8001084:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001088:	4840      	ldr	r0, [pc, #256]	; (800118c <updateLEDMatrix+0x4f4>)
 800108a:	f000 fd93 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[4] >> 1) & 0x01));
 800108e:	4b3e      	ldr	r3, [pc, #248]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001090:	791b      	ldrb	r3, [r3, #4]
 8001092:	085b      	lsrs	r3, r3, #1
 8001094:	b2db      	uxtb	r3, r3
 8001096:	f003 0301 	and.w	r3, r3, #1
 800109a:	b2db      	uxtb	r3, r3
 800109c:	461a      	mov	r2, r3
 800109e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80010a2:	483a      	ldr	r0, [pc, #232]	; (800118c <updateLEDMatrix+0x4f4>)
 80010a4:	f000 fd86 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[4]) & 0x01));
 80010a8:	4b37      	ldr	r3, [pc, #220]	; (8001188 <updateLEDMatrix+0x4f0>)
 80010aa:	791b      	ldrb	r3, [r3, #4]
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	b2db      	uxtb	r3, r3
 80010b2:	461a      	mov	r2, r3
 80010b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010b8:	4834      	ldr	r0, [pc, #208]	; (800118c <updateLEDMatrix+0x4f4>)
 80010ba:	f000 fd7b 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 80010be:	e12f      	b.n	8001320 <updateLEDMatrix+0x688>

	case 5:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[5] >> 7) & 0x01));
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <updateLEDMatrix+0x4f0>)
 80010c2:	795b      	ldrb	r3, [r3, #5]
 80010c4:	09db      	lsrs	r3, r3, #7
 80010c6:	b2db      	uxtb	r3, r3
 80010c8:	461a      	mov	r2, r3
 80010ca:	f44f 7180 	mov.w	r1, #256	; 0x100
 80010ce:	482f      	ldr	r0, [pc, #188]	; (800118c <updateLEDMatrix+0x4f4>)
 80010d0:	f000 fd70 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[5] >> 6) & 0x01));
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <updateLEDMatrix+0x4f0>)
 80010d6:	795b      	ldrb	r3, [r3, #5]
 80010d8:	099b      	lsrs	r3, r3, #6
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	461a      	mov	r2, r3
 80010e4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80010e8:	4828      	ldr	r0, [pc, #160]	; (800118c <updateLEDMatrix+0x4f4>)
 80010ea:	f000 fd63 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[5] >> 5) & 0x01));
 80010ee:	4b26      	ldr	r3, [pc, #152]	; (8001188 <updateLEDMatrix+0x4f0>)
 80010f0:	795b      	ldrb	r3, [r3, #5]
 80010f2:	095b      	lsrs	r3, r3, #5
 80010f4:	b2db      	uxtb	r3, r3
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	b2db      	uxtb	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001102:	4822      	ldr	r0, [pc, #136]	; (800118c <updateLEDMatrix+0x4f4>)
 8001104:	f000 fd56 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[5] >> 4) & 0x01));
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <updateLEDMatrix+0x4f0>)
 800110a:	795b      	ldrb	r3, [r3, #5]
 800110c:	091b      	lsrs	r3, r3, #4
 800110e:	b2db      	uxtb	r3, r3
 8001110:	f003 0301 	and.w	r3, r3, #1
 8001114:	b2db      	uxtb	r3, r3
 8001116:	461a      	mov	r2, r3
 8001118:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800111c:	481b      	ldr	r0, [pc, #108]	; (800118c <updateLEDMatrix+0x4f4>)
 800111e:	f000 fd49 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[5] >> 3) & 0x01));
 8001122:	4b19      	ldr	r3, [pc, #100]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001124:	795b      	ldrb	r3, [r3, #5]
 8001126:	08db      	lsrs	r3, r3, #3
 8001128:	b2db      	uxtb	r3, r3
 800112a:	f003 0301 	and.w	r3, r3, #1
 800112e:	b2db      	uxtb	r3, r3
 8001130:	461a      	mov	r2, r3
 8001132:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001136:	4815      	ldr	r0, [pc, #84]	; (800118c <updateLEDMatrix+0x4f4>)
 8001138:	f000 fd3c 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[5] >> 2) & 0x01));
 800113c:	4b12      	ldr	r3, [pc, #72]	; (8001188 <updateLEDMatrix+0x4f0>)
 800113e:	795b      	ldrb	r3, [r3, #5]
 8001140:	089b      	lsrs	r3, r3, #2
 8001142:	b2db      	uxtb	r3, r3
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	b2db      	uxtb	r3, r3
 800114a:	461a      	mov	r2, r3
 800114c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001150:	480e      	ldr	r0, [pc, #56]	; (800118c <updateLEDMatrix+0x4f4>)
 8001152:	f000 fd2f 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[5] >> 1) & 0x01));
 8001156:	4b0c      	ldr	r3, [pc, #48]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001158:	795b      	ldrb	r3, [r3, #5]
 800115a:	085b      	lsrs	r3, r3, #1
 800115c:	b2db      	uxtb	r3, r3
 800115e:	f003 0301 	and.w	r3, r3, #1
 8001162:	b2db      	uxtb	r3, r3
 8001164:	461a      	mov	r2, r3
 8001166:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800116a:	4808      	ldr	r0, [pc, #32]	; (800118c <updateLEDMatrix+0x4f4>)
 800116c:	f000 fd22 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[5]) & 0x01));
 8001170:	4b05      	ldr	r3, [pc, #20]	; (8001188 <updateLEDMatrix+0x4f0>)
 8001172:	795b      	ldrb	r3, [r3, #5]
 8001174:	f003 0301 	and.w	r3, r3, #1
 8001178:	b2db      	uxtb	r3, r3
 800117a:	461a      	mov	r2, r3
 800117c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001180:	4802      	ldr	r0, [pc, #8]	; (800118c <updateLEDMatrix+0x4f4>)
 8001182:	f000 fd17 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8001186:	e0cb      	b.n	8001320 <updateLEDMatrix+0x688>
 8001188:	2000001c 	.word	0x2000001c
 800118c:	40010c00 	.word	0x40010c00

	case 6:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[6] >> 7) & 0x01));
 8001190:	4b65      	ldr	r3, [pc, #404]	; (8001328 <updateLEDMatrix+0x690>)
 8001192:	799b      	ldrb	r3, [r3, #6]
 8001194:	09db      	lsrs	r3, r3, #7
 8001196:	b2db      	uxtb	r3, r3
 8001198:	461a      	mov	r2, r3
 800119a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800119e:	4863      	ldr	r0, [pc, #396]	; (800132c <updateLEDMatrix+0x694>)
 80011a0:	f000 fd08 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[6] >> 6) & 0x01));
 80011a4:	4b60      	ldr	r3, [pc, #384]	; (8001328 <updateLEDMatrix+0x690>)
 80011a6:	799b      	ldrb	r3, [r3, #6]
 80011a8:	099b      	lsrs	r3, r3, #6
 80011aa:	b2db      	uxtb	r3, r3
 80011ac:	f003 0301 	and.w	r3, r3, #1
 80011b0:	b2db      	uxtb	r3, r3
 80011b2:	461a      	mov	r2, r3
 80011b4:	f44f 7100 	mov.w	r1, #512	; 0x200
 80011b8:	485c      	ldr	r0, [pc, #368]	; (800132c <updateLEDMatrix+0x694>)
 80011ba:	f000 fcfb 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[6] >> 5) & 0x01));
 80011be:	4b5a      	ldr	r3, [pc, #360]	; (8001328 <updateLEDMatrix+0x690>)
 80011c0:	799b      	ldrb	r3, [r3, #6]
 80011c2:	095b      	lsrs	r3, r3, #5
 80011c4:	b2db      	uxtb	r3, r3
 80011c6:	f003 0301 	and.w	r3, r3, #1
 80011ca:	b2db      	uxtb	r3, r3
 80011cc:	461a      	mov	r2, r3
 80011ce:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011d2:	4856      	ldr	r0, [pc, #344]	; (800132c <updateLEDMatrix+0x694>)
 80011d4:	f000 fcee 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[6] >> 4) & 0x01));
 80011d8:	4b53      	ldr	r3, [pc, #332]	; (8001328 <updateLEDMatrix+0x690>)
 80011da:	799b      	ldrb	r3, [r3, #6]
 80011dc:	091b      	lsrs	r3, r3, #4
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f003 0301 	and.w	r3, r3, #1
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	461a      	mov	r2, r3
 80011e8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80011ec:	484f      	ldr	r0, [pc, #316]	; (800132c <updateLEDMatrix+0x694>)
 80011ee:	f000 fce1 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[6] >> 3) & 0x01));
 80011f2:	4b4d      	ldr	r3, [pc, #308]	; (8001328 <updateLEDMatrix+0x690>)
 80011f4:	799b      	ldrb	r3, [r3, #6]
 80011f6:	08db      	lsrs	r3, r3, #3
 80011f8:	b2db      	uxtb	r3, r3
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	461a      	mov	r2, r3
 8001202:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001206:	4849      	ldr	r0, [pc, #292]	; (800132c <updateLEDMatrix+0x694>)
 8001208:	f000 fcd4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[6] >> 2) & 0x01));
 800120c:	4b46      	ldr	r3, [pc, #280]	; (8001328 <updateLEDMatrix+0x690>)
 800120e:	799b      	ldrb	r3, [r3, #6]
 8001210:	089b      	lsrs	r3, r3, #2
 8001212:	b2db      	uxtb	r3, r3
 8001214:	f003 0301 	and.w	r3, r3, #1
 8001218:	b2db      	uxtb	r3, r3
 800121a:	461a      	mov	r2, r3
 800121c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001220:	4842      	ldr	r0, [pc, #264]	; (800132c <updateLEDMatrix+0x694>)
 8001222:	f000 fcc7 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[6] >> 1) & 0x01));
 8001226:	4b40      	ldr	r3, [pc, #256]	; (8001328 <updateLEDMatrix+0x690>)
 8001228:	799b      	ldrb	r3, [r3, #6]
 800122a:	085b      	lsrs	r3, r3, #1
 800122c:	b2db      	uxtb	r3, r3
 800122e:	f003 0301 	and.w	r3, r3, #1
 8001232:	b2db      	uxtb	r3, r3
 8001234:	461a      	mov	r2, r3
 8001236:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800123a:	483c      	ldr	r0, [pc, #240]	; (800132c <updateLEDMatrix+0x694>)
 800123c:	f000 fcba 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[6]) & 0x01));
 8001240:	4b39      	ldr	r3, [pc, #228]	; (8001328 <updateLEDMatrix+0x690>)
 8001242:	799b      	ldrb	r3, [r3, #6]
 8001244:	f003 0301 	and.w	r3, r3, #1
 8001248:	b2db      	uxtb	r3, r3
 800124a:	461a      	mov	r2, r3
 800124c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001250:	4836      	ldr	r0, [pc, #216]	; (800132c <updateLEDMatrix+0x694>)
 8001252:	f000 fcaf 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 8001256:	e063      	b.n	8001320 <updateLEDMatrix+0x688>

	case 7:
		HAL_GPIO_WritePin(ROW0_GPIO_Port, ROW0_Pin, (GPIO_PinState)((matrix_buffer[7] >> 7) & 0x01));
 8001258:	4b33      	ldr	r3, [pc, #204]	; (8001328 <updateLEDMatrix+0x690>)
 800125a:	79db      	ldrb	r3, [r3, #7]
 800125c:	09db      	lsrs	r3, r3, #7
 800125e:	b2db      	uxtb	r3, r3
 8001260:	461a      	mov	r2, r3
 8001262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001266:	4831      	ldr	r0, [pc, #196]	; (800132c <updateLEDMatrix+0x694>)
 8001268:	f000 fca4 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW1_GPIO_Port, ROW1_Pin, (GPIO_PinState)((matrix_buffer[7] >> 6) & 0x01));
 800126c:	4b2e      	ldr	r3, [pc, #184]	; (8001328 <updateLEDMatrix+0x690>)
 800126e:	79db      	ldrb	r3, [r3, #7]
 8001270:	099b      	lsrs	r3, r3, #6
 8001272:	b2db      	uxtb	r3, r3
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	461a      	mov	r2, r3
 800127c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001280:	482a      	ldr	r0, [pc, #168]	; (800132c <updateLEDMatrix+0x694>)
 8001282:	f000 fc97 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW2_GPIO_Port, ROW2_Pin, (GPIO_PinState)((matrix_buffer[7] >> 5) & 0x01));
 8001286:	4b28      	ldr	r3, [pc, #160]	; (8001328 <updateLEDMatrix+0x690>)
 8001288:	79db      	ldrb	r3, [r3, #7]
 800128a:	095b      	lsrs	r3, r3, #5
 800128c:	b2db      	uxtb	r3, r3
 800128e:	f003 0301 	and.w	r3, r3, #1
 8001292:	b2db      	uxtb	r3, r3
 8001294:	461a      	mov	r2, r3
 8001296:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800129a:	4824      	ldr	r0, [pc, #144]	; (800132c <updateLEDMatrix+0x694>)
 800129c:	f000 fc8a 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW3_GPIO_Port, ROW3_Pin, (GPIO_PinState)((matrix_buffer[7] >> 4) & 0x01));
 80012a0:	4b21      	ldr	r3, [pc, #132]	; (8001328 <updateLEDMatrix+0x690>)
 80012a2:	79db      	ldrb	r3, [r3, #7]
 80012a4:	091b      	lsrs	r3, r3, #4
 80012a6:	b2db      	uxtb	r3, r3
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	b2db      	uxtb	r3, r3
 80012ae:	461a      	mov	r2, r3
 80012b0:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012b4:	481d      	ldr	r0, [pc, #116]	; (800132c <updateLEDMatrix+0x694>)
 80012b6:	f000 fc7d 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW4_GPIO_Port, ROW4_Pin, (GPIO_PinState)((matrix_buffer[7] >> 3) & 0x01));
 80012ba:	4b1b      	ldr	r3, [pc, #108]	; (8001328 <updateLEDMatrix+0x690>)
 80012bc:	79db      	ldrb	r3, [r3, #7]
 80012be:	08db      	lsrs	r3, r3, #3
 80012c0:	b2db      	uxtb	r3, r3
 80012c2:	f003 0301 	and.w	r3, r3, #1
 80012c6:	b2db      	uxtb	r3, r3
 80012c8:	461a      	mov	r2, r3
 80012ca:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012ce:	4817      	ldr	r0, [pc, #92]	; (800132c <updateLEDMatrix+0x694>)
 80012d0:	f000 fc70 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW5_GPIO_Port, ROW5_Pin, (GPIO_PinState)((matrix_buffer[7] >> 2) & 0x01));
 80012d4:	4b14      	ldr	r3, [pc, #80]	; (8001328 <updateLEDMatrix+0x690>)
 80012d6:	79db      	ldrb	r3, [r3, #7]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f003 0301 	and.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	461a      	mov	r2, r3
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	4810      	ldr	r0, [pc, #64]	; (800132c <updateLEDMatrix+0x694>)
 80012ea:	f000 fc63 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW6_GPIO_Port, ROW6_Pin, (GPIO_PinState)((matrix_buffer[7] >> 1) & 0x01));
 80012ee:	4b0e      	ldr	r3, [pc, #56]	; (8001328 <updateLEDMatrix+0x690>)
 80012f0:	79db      	ldrb	r3, [r3, #7]
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	461a      	mov	r2, r3
 80012fe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001302:	480a      	ldr	r0, [pc, #40]	; (800132c <updateLEDMatrix+0x694>)
 8001304:	f000 fc56 	bl	8001bb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ROW7_GPIO_Port, ROW7_Pin, (GPIO_PinState)((matrix_buffer[7]) & 0x01));
 8001308:	4b07      	ldr	r3, [pc, #28]	; (8001328 <updateLEDMatrix+0x690>)
 800130a:	79db      	ldrb	r3, [r3, #7]
 800130c:	f003 0301 	and.w	r3, r3, #1
 8001310:	b2db      	uxtb	r3, r3
 8001312:	461a      	mov	r2, r3
 8001314:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001318:	4804      	ldr	r0, [pc, #16]	; (800132c <updateLEDMatrix+0x694>)
 800131a:	f000 fc4b 	bl	8001bb4 <HAL_GPIO_WritePin>
		break;
 800131e:	bf00      	nop
	}
}
 8001320:	bf00      	nop
 8001322:	3708      	adds	r7, #8
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}
 8001328:	2000001c 	.word	0x2000001c
 800132c:	40010c00 	.word	0x40010c00

08001330 <displayLetter>:

void displayLetter(uint8_t *arr)
{
 8001330:	b480      	push	{r7}
 8001332:	b085      	sub	sp, #20
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
	for (int i = 0; i < MAX_LED_MATRIX; i++)
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
 800133c:	e00b      	b.n	8001356 <displayLetter+0x26>
	{
		matrix_buffer[i] = arr[i];
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	687a      	ldr	r2, [r7, #4]
 8001342:	4413      	add	r3, r2
 8001344:	7819      	ldrb	r1, [r3, #0]
 8001346:	4a09      	ldr	r2, [pc, #36]	; (800136c <displayLetter+0x3c>)
 8001348:	68fb      	ldr	r3, [r7, #12]
 800134a:	4413      	add	r3, r2
 800134c:	460a      	mov	r2, r1
 800134e:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < MAX_LED_MATRIX; i++)
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	3301      	adds	r3, #1
 8001354:	60fb      	str	r3, [r7, #12]
 8001356:	2208      	movs	r2, #8
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	4293      	cmp	r3, r2
 800135c:	dbef      	blt.n	800133e <displayLetter+0xe>
	}
}
 800135e:	bf00      	nop
 8001360:	bf00      	nop
 8001362:	3714      	adds	r7, #20
 8001364:	46bd      	mov	sp, r7
 8001366:	bc80      	pop	{r7}
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	2000001c 	.word	0x2000001c

08001370 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001374:	b672      	cpsid	i
}
 8001376:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001378:	e7fe      	b.n	8001378 <Error_Handler+0x8>
	...

0800137c <setTimer1>:

int timer3_flag = 0;
int timer3_counter = 0;

void setTimer1(int duration)
{
 800137c:	b480      	push	{r7}
 800137e:	b083      	sub	sp, #12
 8001380:	af00      	add	r7, sp, #0
 8001382:	6078      	str	r0, [r7, #4]
	timer1_counter = duration;
 8001384:	4a05      	ldr	r2, [pc, #20]	; (800139c <setTimer1+0x20>)
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6013      	str	r3, [r2, #0]
	timer1_flag = 0;
 800138a:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <setTimer1+0x24>)
 800138c:	2200      	movs	r2, #0
 800138e:	601a      	str	r2, [r3, #0]
}
 8001390:	bf00      	nop
 8001392:	370c      	adds	r7, #12
 8001394:	46bd      	mov	sp, r7
 8001396:	bc80      	pop	{r7}
 8001398:	4770      	bx	lr
 800139a:	bf00      	nop
 800139c:	20000058 	.word	0x20000058
 80013a0:	20000054 	.word	0x20000054

080013a4 <setTimer2>:

void setTimer2(int duration)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 80013ac:	4a05      	ldr	r2, [pc, #20]	; (80013c4 <setTimer2+0x20>)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 80013b2:	4b05      	ldr	r3, [pc, #20]	; (80013c8 <setTimer2+0x24>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
}
 80013b8:	bf00      	nop
 80013ba:	370c      	adds	r7, #12
 80013bc:	46bd      	mov	sp, r7
 80013be:	bc80      	pop	{r7}
 80013c0:	4770      	bx	lr
 80013c2:	bf00      	nop
 80013c4:	20000060 	.word	0x20000060
 80013c8:	2000005c 	.word	0x2000005c

080013cc <setTimer3>:

void setTimer3(int duration)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
	timer3_counter = duration;
 80013d4:	4a05      	ldr	r2, [pc, #20]	; (80013ec <setTimer3+0x20>)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6013      	str	r3, [r2, #0]
	timer3_flag = 0;
 80013da:	4b05      	ldr	r3, [pc, #20]	; (80013f0 <setTimer3+0x24>)
 80013dc:	2200      	movs	r2, #0
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bc80      	pop	{r7}
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000068 	.word	0x20000068
 80013f0:	20000064 	.word	0x20000064

080013f4 <timerRun>:

void timerRun()
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
	if (timer1_counter > 0)
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <timerRun+0x6c>)
 80013fa:	681b      	ldr	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	dd0b      	ble.n	8001418 <timerRun+0x24>
	{
		timer1_counter--;
 8001400:	4b17      	ldr	r3, [pc, #92]	; (8001460 <timerRun+0x6c>)
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	3b01      	subs	r3, #1
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <timerRun+0x6c>)
 8001408:	6013      	str	r3, [r2, #0]
		if (timer1_counter <= 0)
 800140a:	4b15      	ldr	r3, [pc, #84]	; (8001460 <timerRun+0x6c>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2b00      	cmp	r3, #0
 8001410:	dc02      	bgt.n	8001418 <timerRun+0x24>
		{
			timer1_flag = 1;
 8001412:	4b14      	ldr	r3, [pc, #80]	; (8001464 <timerRun+0x70>)
 8001414:	2201      	movs	r2, #1
 8001416:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer2_counter > 0)
 8001418:	4b13      	ldr	r3, [pc, #76]	; (8001468 <timerRun+0x74>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	2b00      	cmp	r3, #0
 800141e:	dd0b      	ble.n	8001438 <timerRun+0x44>
	{
		timer2_counter--;
 8001420:	4b11      	ldr	r3, [pc, #68]	; (8001468 <timerRun+0x74>)
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	3b01      	subs	r3, #1
 8001426:	4a10      	ldr	r2, [pc, #64]	; (8001468 <timerRun+0x74>)
 8001428:	6013      	str	r3, [r2, #0]
		if (timer2_counter <= 0)
 800142a:	4b0f      	ldr	r3, [pc, #60]	; (8001468 <timerRun+0x74>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	dc02      	bgt.n	8001438 <timerRun+0x44>
		{
			timer2_flag = 1;
 8001432:	4b0e      	ldr	r3, [pc, #56]	; (800146c <timerRun+0x78>)
 8001434:	2201      	movs	r2, #1
 8001436:	601a      	str	r2, [r3, #0]
		}
	}

	if (timer3_counter > 0)
 8001438:	4b0d      	ldr	r3, [pc, #52]	; (8001470 <timerRun+0x7c>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	2b00      	cmp	r3, #0
 800143e:	dd0b      	ble.n	8001458 <timerRun+0x64>
	{
		timer3_counter--;
 8001440:	4b0b      	ldr	r3, [pc, #44]	; (8001470 <timerRun+0x7c>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	3b01      	subs	r3, #1
 8001446:	4a0a      	ldr	r2, [pc, #40]	; (8001470 <timerRun+0x7c>)
 8001448:	6013      	str	r3, [r2, #0]
		if (timer3_counter <= 0)
 800144a:	4b09      	ldr	r3, [pc, #36]	; (8001470 <timerRun+0x7c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2b00      	cmp	r3, #0
 8001450:	dc02      	bgt.n	8001458 <timerRun+0x64>
		{
			timer3_flag = 1;
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <timerRun+0x80>)
 8001454:	2201      	movs	r2, #1
 8001456:	601a      	str	r2, [r3, #0]
		}
	}
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	bc80      	pop	{r7}
 800145e:	4770      	bx	lr
 8001460:	20000058 	.word	0x20000058
 8001464:	20000054 	.word	0x20000054
 8001468:	20000060 	.word	0x20000060
 800146c:	2000005c 	.word	0x2000005c
 8001470:	20000068 	.word	0x20000068
 8001474:	20000064 	.word	0x20000064

08001478 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001478:	b480      	push	{r7}
 800147a:	b085      	sub	sp, #20
 800147c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800147e:	4b15      	ldr	r3, [pc, #84]	; (80014d4 <HAL_MspInit+0x5c>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a14      	ldr	r2, [pc, #80]	; (80014d4 <HAL_MspInit+0x5c>)
 8001484:	f043 0301 	orr.w	r3, r3, #1
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b12      	ldr	r3, [pc, #72]	; (80014d4 <HAL_MspInit+0x5c>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0301 	and.w	r3, r3, #1
 8001492:	60bb      	str	r3, [r7, #8]
 8001494:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001496:	4b0f      	ldr	r3, [pc, #60]	; (80014d4 <HAL_MspInit+0x5c>)
 8001498:	69db      	ldr	r3, [r3, #28]
 800149a:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <HAL_MspInit+0x5c>)
 800149c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014a0:	61d3      	str	r3, [r2, #28]
 80014a2:	4b0c      	ldr	r3, [pc, #48]	; (80014d4 <HAL_MspInit+0x5c>)
 80014a4:	69db      	ldr	r3, [r3, #28]
 80014a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 80014ae:	4b0a      	ldr	r3, [pc, #40]	; (80014d8 <HAL_MspInit+0x60>)
 80014b0:	685b      	ldr	r3, [r3, #4]
 80014b2:	60fb      	str	r3, [r7, #12]
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80014c2:	60fb      	str	r3, [r7, #12]
 80014c4:	4a04      	ldr	r2, [pc, #16]	; (80014d8 <HAL_MspInit+0x60>)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ca:	bf00      	nop
 80014cc:	3714      	adds	r7, #20
 80014ce:	46bd      	mov	sp, r7
 80014d0:	bc80      	pop	{r7}
 80014d2:	4770      	bx	lr
 80014d4:	40021000 	.word	0x40021000
 80014d8:	40010000 	.word	0x40010000

080014dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80014ec:	d113      	bne.n	8001516 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	4a0b      	ldr	r2, [pc, #44]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	61d3      	str	r3, [r2, #28]
 80014fa:	4b09      	ldr	r3, [pc, #36]	; (8001520 <HAL_TIM_Base_MspInit+0x44>)
 80014fc:	69db      	ldr	r3, [r3, #28]
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2100      	movs	r1, #0
 800150a:	201c      	movs	r0, #28
 800150c:	f000 f9a1 	bl	8001852 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001510:	201c      	movs	r0, #28
 8001512:	f000 f9ba 	bl	800188a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001516:	bf00      	nop
 8001518:	3710      	adds	r7, #16
 800151a:	46bd      	mov	sp, r7
 800151c:	bd80      	pop	{r7, pc}
 800151e:	bf00      	nop
 8001520:	40021000 	.word	0x40021000

08001524 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001528:	e7fe      	b.n	8001528 <NMI_Handler+0x4>

0800152a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800152a:	b480      	push	{r7}
 800152c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800152e:	e7fe      	b.n	800152e <HardFault_Handler+0x4>

08001530 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001534:	e7fe      	b.n	8001534 <MemManage_Handler+0x4>

08001536 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001536:	b480      	push	{r7}
 8001538:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800153a:	e7fe      	b.n	800153a <BusFault_Handler+0x4>

0800153c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001540:	e7fe      	b.n	8001540 <UsageFault_Handler+0x4>

08001542 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001542:	b480      	push	{r7}
 8001544:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001546:	bf00      	nop
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	46bd      	mov	sp, r7
 8001556:	bc80      	pop	{r7}
 8001558:	4770      	bx	lr

0800155a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800155e:	bf00      	nop
 8001560:	46bd      	mov	sp, r7
 8001562:	bc80      	pop	{r7}
 8001564:	4770      	bx	lr

08001566 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800156a:	f000 f87f 	bl	800166c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800156e:	bf00      	nop
 8001570:	bd80      	pop	{r7, pc}
	...

08001574 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001578:	4802      	ldr	r0, [pc, #8]	; (8001584 <TIM2_IRQHandler+0x10>)
 800157a:	f000 ffc5 	bl	8002508 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800157e:	bf00      	nop
 8001580:	bd80      	pop	{r7, pc}
 8001582:	bf00      	nop
 8001584:	2000006c 	.word	0x2000006c

08001588 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800158c:	bf00      	nop
 800158e:	46bd      	mov	sp, r7
 8001590:	bc80      	pop	{r7}
 8001592:	4770      	bx	lr

08001594 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001594:	f7ff fff8 	bl	8001588 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001598:	480b      	ldr	r0, [pc, #44]	; (80015c8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800159a:	490c      	ldr	r1, [pc, #48]	; (80015cc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 800159c:	4a0c      	ldr	r2, [pc, #48]	; (80015d0 <LoopFillZerobss+0x16>)
  movs r3, #0
 800159e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015a0:	e002      	b.n	80015a8 <LoopCopyDataInit>

080015a2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015a2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015a4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015a6:	3304      	adds	r3, #4

080015a8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015aa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015ac:	d3f9      	bcc.n	80015a2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ae:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80015b0:	4c09      	ldr	r4, [pc, #36]	; (80015d8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80015b2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015b4:	e001      	b.n	80015ba <LoopFillZerobss>

080015b6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015b6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b8:	3204      	adds	r2, #4

080015ba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015ba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015bc:	d3fb      	bcc.n	80015b6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80015be:	f001 faef 	bl	8002ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015c2:	f7fe fdc3 	bl	800014c <main>
  bx lr
 80015c6:	4770      	bx	lr
  ldr r0, =_sdata
 80015c8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015cc:	20000030 	.word	0x20000030
  ldr r2, =_sidata
 80015d0:	08002c44 	.word	0x08002c44
  ldr r2, =_sbss
 80015d4:	20000030 	.word	0x20000030
  ldr r4, =_ebss
 80015d8:	200000b8 	.word	0x200000b8

080015dc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015dc:	e7fe      	b.n	80015dc <ADC1_2_IRQHandler>
	...

080015e0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e4:	4b08      	ldr	r3, [pc, #32]	; (8001608 <HAL_Init+0x28>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	4a07      	ldr	r2, [pc, #28]	; (8001608 <HAL_Init+0x28>)
 80015ea:	f043 0310 	orr.w	r3, r3, #16
 80015ee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 f923 	bl	800183c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f6:	200f      	movs	r0, #15
 80015f8:	f000 f808 	bl	800160c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015fc:	f7ff ff3c 	bl	8001478 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40022000 	.word	0x40022000

0800160c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001614:	4b12      	ldr	r3, [pc, #72]	; (8001660 <HAL_InitTick+0x54>)
 8001616:	681a      	ldr	r2, [r3, #0]
 8001618:	4b12      	ldr	r3, [pc, #72]	; (8001664 <HAL_InitTick+0x58>)
 800161a:	781b      	ldrb	r3, [r3, #0]
 800161c:	4619      	mov	r1, r3
 800161e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001622:	fbb3 f3f1 	udiv	r3, r3, r1
 8001626:	fbb2 f3f3 	udiv	r3, r2, r3
 800162a:	4618      	mov	r0, r3
 800162c:	f000 f93b 	bl	80018a6 <HAL_SYSTICK_Config>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e00e      	b.n	8001658 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	2b0f      	cmp	r3, #15
 800163e:	d80a      	bhi.n	8001656 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001640:	2200      	movs	r2, #0
 8001642:	6879      	ldr	r1, [r7, #4]
 8001644:	f04f 30ff 	mov.w	r0, #4294967295
 8001648:	f000 f903 	bl	8001852 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800164c:	4a06      	ldr	r2, [pc, #24]	; (8001668 <HAL_InitTick+0x5c>)
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001652:	2300      	movs	r3, #0
 8001654:	e000      	b.n	8001658 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001656:	2301      	movs	r3, #1
}
 8001658:	4618      	mov	r0, r3
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}
 8001660:	20000024 	.word	0x20000024
 8001664:	2000002c 	.word	0x2000002c
 8001668:	20000028 	.word	0x20000028

0800166c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800166c:	b480      	push	{r7}
 800166e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001670:	4b05      	ldr	r3, [pc, #20]	; (8001688 <HAL_IncTick+0x1c>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	461a      	mov	r2, r3
 8001676:	4b05      	ldr	r3, [pc, #20]	; (800168c <HAL_IncTick+0x20>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4413      	add	r3, r2
 800167c:	4a03      	ldr	r2, [pc, #12]	; (800168c <HAL_IncTick+0x20>)
 800167e:	6013      	str	r3, [r2, #0]
}
 8001680:	bf00      	nop
 8001682:	46bd      	mov	sp, r7
 8001684:	bc80      	pop	{r7}
 8001686:	4770      	bx	lr
 8001688:	2000002c 	.word	0x2000002c
 800168c:	200000b4 	.word	0x200000b4

08001690 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b02      	ldr	r3, [pc, #8]	; (80016a0 <HAL_GetTick+0x10>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	bc80      	pop	{r7}
 800169e:	4770      	bx	lr
 80016a0:	200000b4 	.word	0x200000b4

080016a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f003 0307 	and.w	r3, r3, #7
 80016b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b4:	4b0c      	ldr	r3, [pc, #48]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016ba:	68ba      	ldr	r2, [r7, #8]
 80016bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016c0:	4013      	ands	r3, r2
 80016c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016c8:	68bb      	ldr	r3, [r7, #8]
 80016ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016d6:	4a04      	ldr	r2, [pc, #16]	; (80016e8 <__NVIC_SetPriorityGrouping+0x44>)
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	60d3      	str	r3, [r2, #12]
}
 80016dc:	bf00      	nop
 80016de:	3714      	adds	r7, #20
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bc80      	pop	{r7}
 80016e4:	4770      	bx	lr
 80016e6:	bf00      	nop
 80016e8:	e000ed00 	.word	0xe000ed00

080016ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016ec:	b480      	push	{r7}
 80016ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f0:	4b04      	ldr	r3, [pc, #16]	; (8001704 <__NVIC_GetPriorityGrouping+0x18>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	0a1b      	lsrs	r3, r3, #8
 80016f6:	f003 0307 	and.w	r3, r3, #7
}
 80016fa:	4618      	mov	r0, r3
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bc80      	pop	{r7}
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000ed00 	.word	0xe000ed00

08001708 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001716:	2b00      	cmp	r3, #0
 8001718:	db0b      	blt.n	8001732 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171a:	79fb      	ldrb	r3, [r7, #7]
 800171c:	f003 021f 	and.w	r2, r3, #31
 8001720:	4906      	ldr	r1, [pc, #24]	; (800173c <__NVIC_EnableIRQ+0x34>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	095b      	lsrs	r3, r3, #5
 8001728:	2001      	movs	r0, #1
 800172a:	fa00 f202 	lsl.w	r2, r0, r2
 800172e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bc80      	pop	{r7}
 800173a:	4770      	bx	lr
 800173c:	e000e100 	.word	0xe000e100

08001740 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	6039      	str	r1, [r7, #0]
 800174a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001750:	2b00      	cmp	r3, #0
 8001752:	db0a      	blt.n	800176a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	b2da      	uxtb	r2, r3
 8001758:	490c      	ldr	r1, [pc, #48]	; (800178c <__NVIC_SetPriority+0x4c>)
 800175a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175e:	0112      	lsls	r2, r2, #4
 8001760:	b2d2      	uxtb	r2, r2
 8001762:	440b      	add	r3, r1
 8001764:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001768:	e00a      	b.n	8001780 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4908      	ldr	r1, [pc, #32]	; (8001790 <__NVIC_SetPriority+0x50>)
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	f003 030f 	and.w	r3, r3, #15
 8001776:	3b04      	subs	r3, #4
 8001778:	0112      	lsls	r2, r2, #4
 800177a:	b2d2      	uxtb	r2, r2
 800177c:	440b      	add	r3, r1
 800177e:	761a      	strb	r2, [r3, #24]
}
 8001780:	bf00      	nop
 8001782:	370c      	adds	r7, #12
 8001784:	46bd      	mov	sp, r7
 8001786:	bc80      	pop	{r7}
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	e000e100 	.word	0xe000e100
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001794:	b480      	push	{r7}
 8001796:	b089      	sub	sp, #36	; 0x24
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	f1c3 0307 	rsb	r3, r3, #7
 80017ae:	2b04      	cmp	r3, #4
 80017b0:	bf28      	it	cs
 80017b2:	2304      	movcs	r3, #4
 80017b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017b6:	69fb      	ldr	r3, [r7, #28]
 80017b8:	3304      	adds	r3, #4
 80017ba:	2b06      	cmp	r3, #6
 80017bc:	d902      	bls.n	80017c4 <NVIC_EncodePriority+0x30>
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3b03      	subs	r3, #3
 80017c2:	e000      	b.n	80017c6 <NVIC_EncodePriority+0x32>
 80017c4:	2300      	movs	r3, #0
 80017c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017c8:	f04f 32ff 	mov.w	r2, #4294967295
 80017cc:	69bb      	ldr	r3, [r7, #24]
 80017ce:	fa02 f303 	lsl.w	r3, r2, r3
 80017d2:	43da      	mvns	r2, r3
 80017d4:	68bb      	ldr	r3, [r7, #8]
 80017d6:	401a      	ands	r2, r3
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017dc:	f04f 31ff 	mov.w	r1, #4294967295
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	fa01 f303 	lsl.w	r3, r1, r3
 80017e6:	43d9      	mvns	r1, r3
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017ec:	4313      	orrs	r3, r2
         );
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3724      	adds	r7, #36	; 0x24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bc80      	pop	{r7}
 80017f6:	4770      	bx	lr

080017f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	3b01      	subs	r3, #1
 8001804:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001808:	d301      	bcc.n	800180e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800180a:	2301      	movs	r3, #1
 800180c:	e00f      	b.n	800182e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800180e:	4a0a      	ldr	r2, [pc, #40]	; (8001838 <SysTick_Config+0x40>)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	3b01      	subs	r3, #1
 8001814:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001816:	210f      	movs	r1, #15
 8001818:	f04f 30ff 	mov.w	r0, #4294967295
 800181c:	f7ff ff90 	bl	8001740 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <SysTick_Config+0x40>)
 8001822:	2200      	movs	r2, #0
 8001824:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001826:	4b04      	ldr	r3, [pc, #16]	; (8001838 <SysTick_Config+0x40>)
 8001828:	2207      	movs	r2, #7
 800182a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800182c:	2300      	movs	r3, #0
}
 800182e:	4618      	mov	r0, r3
 8001830:	3708      	adds	r7, #8
 8001832:	46bd      	mov	sp, r7
 8001834:	bd80      	pop	{r7, pc}
 8001836:	bf00      	nop
 8001838:	e000e010 	.word	0xe000e010

0800183c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001844:	6878      	ldr	r0, [r7, #4]
 8001846:	f7ff ff2d 	bl	80016a4 <__NVIC_SetPriorityGrouping>
}
 800184a:	bf00      	nop
 800184c:	3708      	adds	r7, #8
 800184e:	46bd      	mov	sp, r7
 8001850:	bd80      	pop	{r7, pc}

08001852 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001852:	b580      	push	{r7, lr}
 8001854:	b086      	sub	sp, #24
 8001856:	af00      	add	r7, sp, #0
 8001858:	4603      	mov	r3, r0
 800185a:	60b9      	str	r1, [r7, #8]
 800185c:	607a      	str	r2, [r7, #4]
 800185e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001860:	2300      	movs	r3, #0
 8001862:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001864:	f7ff ff42 	bl	80016ec <__NVIC_GetPriorityGrouping>
 8001868:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186a:	687a      	ldr	r2, [r7, #4]
 800186c:	68b9      	ldr	r1, [r7, #8]
 800186e:	6978      	ldr	r0, [r7, #20]
 8001870:	f7ff ff90 	bl	8001794 <NVIC_EncodePriority>
 8001874:	4602      	mov	r2, r0
 8001876:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187a:	4611      	mov	r1, r2
 800187c:	4618      	mov	r0, r3
 800187e:	f7ff ff5f 	bl	8001740 <__NVIC_SetPriority>
}
 8001882:	bf00      	nop
 8001884:	3718      	adds	r7, #24
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}

0800188a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188a:	b580      	push	{r7, lr}
 800188c:	b082      	sub	sp, #8
 800188e:	af00      	add	r7, sp, #0
 8001890:	4603      	mov	r3, r0
 8001892:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001894:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001898:	4618      	mov	r0, r3
 800189a:	f7ff ff35 	bl	8001708 <__NVIC_EnableIRQ>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}

080018a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018a6:	b580      	push	{r7, lr}
 80018a8:	b082      	sub	sp, #8
 80018aa:	af00      	add	r7, sp, #0
 80018ac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ffa2 	bl	80017f8 <SysTick_Config>
 80018b4:	4603      	mov	r3, r0
}
 80018b6:	4618      	mov	r0, r3
 80018b8:	3708      	adds	r7, #8
 80018ba:	46bd      	mov	sp, r7
 80018bc:	bd80      	pop	{r7, pc}
	...

080018c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b08b      	sub	sp, #44	; 0x2c
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
 80018c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80018ca:	2300      	movs	r3, #0
 80018cc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80018d2:	e148      	b.n	8001b66 <HAL_GPIO_Init+0x2a6>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80018d4:	2201      	movs	r2, #1
 80018d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80018de:	683b      	ldr	r3, [r7, #0]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	69fa      	ldr	r2, [r7, #28]
 80018e4:	4013      	ands	r3, r2
 80018e6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80018e8:	69ba      	ldr	r2, [r7, #24]
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	f040 8137 	bne.w	8001b60 <HAL_GPIO_Init+0x2a0>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	4aa3      	ldr	r2, [pc, #652]	; (8001b84 <HAL_GPIO_Init+0x2c4>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d05e      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 80018fc:	4aa1      	ldr	r2, [pc, #644]	; (8001b84 <HAL_GPIO_Init+0x2c4>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d875      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001902:	4aa1      	ldr	r2, [pc, #644]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 8001904:	4293      	cmp	r3, r2
 8001906:	d058      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001908:	4a9f      	ldr	r2, [pc, #636]	; (8001b88 <HAL_GPIO_Init+0x2c8>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d86f      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800190e:	4a9f      	ldr	r2, [pc, #636]	; (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d052      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001914:	4a9d      	ldr	r2, [pc, #628]	; (8001b8c <HAL_GPIO_Init+0x2cc>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d869      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800191a:	4a9d      	ldr	r2, [pc, #628]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 800191c:	4293      	cmp	r3, r2
 800191e:	d04c      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 8001920:	4a9b      	ldr	r2, [pc, #620]	; (8001b90 <HAL_GPIO_Init+0x2d0>)
 8001922:	4293      	cmp	r3, r2
 8001924:	d863      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001926:	4a9b      	ldr	r2, [pc, #620]	; (8001b94 <HAL_GPIO_Init+0x2d4>)
 8001928:	4293      	cmp	r3, r2
 800192a:	d046      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
 800192c:	4a99      	ldr	r2, [pc, #612]	; (8001b94 <HAL_GPIO_Init+0x2d4>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d85d      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 8001932:	2b12      	cmp	r3, #18
 8001934:	d82a      	bhi.n	800198c <HAL_GPIO_Init+0xcc>
 8001936:	2b12      	cmp	r3, #18
 8001938:	d859      	bhi.n	80019ee <HAL_GPIO_Init+0x12e>
 800193a:	a201      	add	r2, pc, #4	; (adr r2, 8001940 <HAL_GPIO_Init+0x80>)
 800193c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001940:	080019bb 	.word	0x080019bb
 8001944:	08001995 	.word	0x08001995
 8001948:	080019a7 	.word	0x080019a7
 800194c:	080019e9 	.word	0x080019e9
 8001950:	080019ef 	.word	0x080019ef
 8001954:	080019ef 	.word	0x080019ef
 8001958:	080019ef 	.word	0x080019ef
 800195c:	080019ef 	.word	0x080019ef
 8001960:	080019ef 	.word	0x080019ef
 8001964:	080019ef 	.word	0x080019ef
 8001968:	080019ef 	.word	0x080019ef
 800196c:	080019ef 	.word	0x080019ef
 8001970:	080019ef 	.word	0x080019ef
 8001974:	080019ef 	.word	0x080019ef
 8001978:	080019ef 	.word	0x080019ef
 800197c:	080019ef 	.word	0x080019ef
 8001980:	080019ef 	.word	0x080019ef
 8001984:	0800199d 	.word	0x0800199d
 8001988:	080019b1 	.word	0x080019b1
 800198c:	4a82      	ldr	r2, [pc, #520]	; (8001b98 <HAL_GPIO_Init+0x2d8>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d013      	beq.n	80019ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001992:	e02c      	b.n	80019ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	68db      	ldr	r3, [r3, #12]
 8001998:	623b      	str	r3, [r7, #32]
          break;
 800199a:	e029      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	68db      	ldr	r3, [r3, #12]
 80019a0:	3304      	adds	r3, #4
 80019a2:	623b      	str	r3, [r7, #32]
          break;
 80019a4:	e024      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80019a6:	683b      	ldr	r3, [r7, #0]
 80019a8:	68db      	ldr	r3, [r3, #12]
 80019aa:	3308      	adds	r3, #8
 80019ac:	623b      	str	r3, [r7, #32]
          break;
 80019ae:	e01f      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	330c      	adds	r3, #12
 80019b6:	623b      	str	r3, [r7, #32]
          break;
 80019b8:	e01a      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d102      	bne.n	80019c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80019c2:	2304      	movs	r3, #4
 80019c4:	623b      	str	r3, [r7, #32]
          break;
 80019c6:	e013      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	2b01      	cmp	r3, #1
 80019ce:	d105      	bne.n	80019dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019d0:	2308      	movs	r3, #8
 80019d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	69fa      	ldr	r2, [r7, #28]
 80019d8:	611a      	str	r2, [r3, #16]
          break;
 80019da:	e009      	b.n	80019f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80019dc:	2308      	movs	r3, #8
 80019de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	69fa      	ldr	r2, [r7, #28]
 80019e4:	615a      	str	r2, [r3, #20]
          break;
 80019e6:	e003      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80019e8:	2300      	movs	r3, #0
 80019ea:	623b      	str	r3, [r7, #32]
          break;
 80019ec:	e000      	b.n	80019f0 <HAL_GPIO_Init+0x130>
          break;
 80019ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2bff      	cmp	r3, #255	; 0xff
 80019f4:	d801      	bhi.n	80019fa <HAL_GPIO_Init+0x13a>
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	e001      	b.n	80019fe <HAL_GPIO_Init+0x13e>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	3304      	adds	r3, #4
 80019fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	2bff      	cmp	r3, #255	; 0xff
 8001a04:	d802      	bhi.n	8001a0c <HAL_GPIO_Init+0x14c>
 8001a06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a08:	009b      	lsls	r3, r3, #2
 8001a0a:	e002      	b.n	8001a12 <HAL_GPIO_Init+0x152>
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b08      	subs	r3, #8
 8001a10:	009b      	lsls	r3, r3, #2
 8001a12:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	681a      	ldr	r2, [r3, #0]
 8001a18:	210f      	movs	r1, #15
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001a20:	43db      	mvns	r3, r3
 8001a22:	401a      	ands	r2, r3
 8001a24:	6a39      	ldr	r1, [r7, #32]
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	fa01 f303 	lsl.w	r3, r1, r3
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001a32:	683b      	ldr	r3, [r7, #0]
 8001a34:	685b      	ldr	r3, [r3, #4]
 8001a36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	f000 8090 	beq.w	8001b60 <HAL_GPIO_Init+0x2a0>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001a40:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001a42:	699b      	ldr	r3, [r3, #24]
 8001a44:	4a55      	ldr	r2, [pc, #340]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001a46:	f043 0301 	orr.w	r3, r3, #1
 8001a4a:	6193      	str	r3, [r2, #24]
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_GPIO_Init+0x2dc>)
 8001a4e:	699b      	ldr	r3, [r3, #24]
 8001a50:	f003 0301 	and.w	r3, r3, #1
 8001a54:	60bb      	str	r3, [r7, #8]
 8001a56:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001a58:	4a51      	ldr	r2, [pc, #324]	; (8001ba0 <HAL_GPIO_Init+0x2e0>)
 8001a5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	3302      	adds	r3, #2
 8001a60:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a64:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	f003 0303 	and.w	r3, r3, #3
 8001a6c:	009b      	lsls	r3, r3, #2
 8001a6e:	220f      	movs	r2, #15
 8001a70:	fa02 f303 	lsl.w	r3, r2, r3
 8001a74:	43db      	mvns	r3, r3
 8001a76:	68fa      	ldr	r2, [r7, #12]
 8001a78:	4013      	ands	r3, r2
 8001a7a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	4a49      	ldr	r2, [pc, #292]	; (8001ba4 <HAL_GPIO_Init+0x2e4>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	d00d      	beq.n	8001aa0 <HAL_GPIO_Init+0x1e0>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	4a48      	ldr	r2, [pc, #288]	; (8001ba8 <HAL_GPIO_Init+0x2e8>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d007      	beq.n	8001a9c <HAL_GPIO_Init+0x1dc>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	4a47      	ldr	r2, [pc, #284]	; (8001bac <HAL_GPIO_Init+0x2ec>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	d101      	bne.n	8001a98 <HAL_GPIO_Init+0x1d8>
 8001a94:	2302      	movs	r3, #2
 8001a96:	e004      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001a98:	2303      	movs	r3, #3
 8001a9a:	e002      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001a9c:	2301      	movs	r3, #1
 8001a9e:	e000      	b.n	8001aa2 <HAL_GPIO_Init+0x1e2>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001aa4:	f002 0203 	and.w	r2, r2, #3
 8001aa8:	0092      	lsls	r2, r2, #2
 8001aaa:	4093      	lsls	r3, r2
 8001aac:	68fa      	ldr	r2, [r7, #12]
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001ab2:	493b      	ldr	r1, [pc, #236]	; (8001ba0 <HAL_GPIO_Init+0x2e0>)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	68fa      	ldr	r2, [r7, #12]
 8001abc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d006      	beq.n	8001ada <HAL_GPIO_Init+0x21a>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001acc:	4b38      	ldr	r3, [pc, #224]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001ace:	689a      	ldr	r2, [r3, #8]
 8001ad0:	4937      	ldr	r1, [pc, #220]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001ad2:	69bb      	ldr	r3, [r7, #24]
 8001ad4:	4313      	orrs	r3, r2
 8001ad6:	608b      	str	r3, [r1, #8]
 8001ad8:	e006      	b.n	8001ae8 <HAL_GPIO_Init+0x228>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ada:	4b35      	ldr	r3, [pc, #212]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	69bb      	ldr	r3, [r7, #24]
 8001ae0:	43db      	mvns	r3, r3
 8001ae2:	4933      	ldr	r1, [pc, #204]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d006      	beq.n	8001b02 <HAL_GPIO_Init+0x242>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001af4:	4b2e      	ldr	r3, [pc, #184]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001af6:	68da      	ldr	r2, [r3, #12]
 8001af8:	492d      	ldr	r1, [pc, #180]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001afa:	69bb      	ldr	r3, [r7, #24]
 8001afc:	4313      	orrs	r3, r2
 8001afe:	60cb      	str	r3, [r1, #12]
 8001b00:	e006      	b.n	8001b10 <HAL_GPIO_Init+0x250>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001b02:	4b2b      	ldr	r3, [pc, #172]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b04:	68da      	ldr	r2, [r3, #12]
 8001b06:	69bb      	ldr	r3, [r7, #24]
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	4929      	ldr	r1, [pc, #164]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d006      	beq.n	8001b2a <HAL_GPIO_Init+0x26a>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001b1c:	4b24      	ldr	r3, [pc, #144]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b1e:	685a      	ldr	r2, [r3, #4]
 8001b20:	4923      	ldr	r1, [pc, #140]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b22:	69bb      	ldr	r3, [r7, #24]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	604b      	str	r3, [r1, #4]
 8001b28:	e006      	b.n	8001b38 <HAL_GPIO_Init+0x278>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001b2a:	4b21      	ldr	r3, [pc, #132]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b2c:	685a      	ldr	r2, [r3, #4]
 8001b2e:	69bb      	ldr	r3, [r7, #24]
 8001b30:	43db      	mvns	r3, r3
 8001b32:	491f      	ldr	r1, [pc, #124]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b34:	4013      	ands	r3, r2
 8001b36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685b      	ldr	r3, [r3, #4]
 8001b3c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d006      	beq.n	8001b52 <HAL_GPIO_Init+0x292>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b44:	4b1a      	ldr	r3, [pc, #104]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b46:	681a      	ldr	r2, [r3, #0]
 8001b48:	4919      	ldr	r1, [pc, #100]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b4a:	69bb      	ldr	r3, [r7, #24]
 8001b4c:	4313      	orrs	r3, r2
 8001b4e:	600b      	str	r3, [r1, #0]
 8001b50:	e006      	b.n	8001b60 <HAL_GPIO_Init+0x2a0>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001b52:	4b17      	ldr	r3, [pc, #92]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	43db      	mvns	r3, r3
 8001b5a:	4915      	ldr	r1, [pc, #84]	; (8001bb0 <HAL_GPIO_Init+0x2f0>)
 8001b5c:	4013      	ands	r3, r2
 8001b5e:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b62:	3301      	adds	r3, #1
 8001b64:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681a      	ldr	r2, [r3, #0]
 8001b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f47f aeaf 	bne.w	80018d4 <HAL_GPIO_Init+0x14>
  }
}
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	372c      	adds	r7, #44	; 0x2c
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bc80      	pop	{r7}
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	10320000 	.word	0x10320000
 8001b88:	10310000 	.word	0x10310000
 8001b8c:	10220000 	.word	0x10220000
 8001b90:	10210000 	.word	0x10210000
 8001b94:	10120000 	.word	0x10120000
 8001b98:	10110000 	.word	0x10110000
 8001b9c:	40021000 	.word	0x40021000
 8001ba0:	40010000 	.word	0x40010000
 8001ba4:	40010800 	.word	0x40010800
 8001ba8:	40010c00 	.word	0x40010c00
 8001bac:	40011000 	.word	0x40011000
 8001bb0:	40010400 	.word	0x40010400

08001bb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bb4:	b480      	push	{r7}
 8001bb6:	b083      	sub	sp, #12
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	460b      	mov	r3, r1
 8001bbe:	807b      	strh	r3, [r7, #2]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bc4:	787b      	ldrb	r3, [r7, #1]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001bca:	887a      	ldrh	r2, [r7, #2]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001bd0:	e003      	b.n	8001bda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001bd2:	887b      	ldrh	r3, [r7, #2]
 8001bd4:	041a      	lsls	r2, r3, #16
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	611a      	str	r2, [r3, #16]
}
 8001bda:	bf00      	nop
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bc80      	pop	{r7}
 8001be2:	4770      	bx	lr

08001be4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001be4:	b480      	push	{r7}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
 8001bec:	460b      	mov	r3, r1
 8001bee:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	68db      	ldr	r3, [r3, #12]
 8001bf4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	4013      	ands	r3, r2
 8001bfc:	041a      	lsls	r2, r3, #16
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	43d9      	mvns	r1, r3
 8001c02:	887b      	ldrh	r3, [r7, #2]
 8001c04:	400b      	ands	r3, r1
 8001c06:	431a      	orrs	r2, r3
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	611a      	str	r2, [r3, #16]
}
 8001c0c:	bf00      	nop
 8001c0e:	3714      	adds	r7, #20
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bc80      	pop	{r7}
 8001c14:	4770      	bx	lr
	...

08001c18 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b086      	sub	sp, #24
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d101      	bne.n	8001c2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c26:	2301      	movs	r3, #1
 8001c28:	e26c      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	f003 0301 	and.w	r3, r3, #1
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	f000 8087 	beq.w	8001d46 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001c38:	4b92      	ldr	r3, [pc, #584]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	f003 030c 	and.w	r3, r3, #12
 8001c40:	2b04      	cmp	r3, #4
 8001c42:	d00c      	beq.n	8001c5e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c44:	4b8f      	ldr	r3, [pc, #572]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	f003 030c 	and.w	r3, r3, #12
 8001c4c:	2b08      	cmp	r3, #8
 8001c4e:	d112      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
 8001c50:	4b8c      	ldr	r3, [pc, #560]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c52:	685b      	ldr	r3, [r3, #4]
 8001c54:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001c58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c5c:	d10b      	bne.n	8001c76 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c5e:	4b89      	ldr	r3, [pc, #548]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d06c      	beq.n	8001d44 <HAL_RCC_OscConfig+0x12c>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d168      	bne.n	8001d44 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e246      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x76>
 8001c80:	4b80      	ldr	r3, [pc, #512]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a7f      	ldr	r2, [pc, #508]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e02e      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d10c      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x98>
 8001c96:	4b7b      	ldr	r3, [pc, #492]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	4a7a      	ldr	r2, [pc, #488]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca0:	6013      	str	r3, [r2, #0]
 8001ca2:	4b78      	ldr	r3, [pc, #480]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	4a77      	ldr	r2, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ca8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cac:	6013      	str	r3, [r2, #0]
 8001cae:	e01d      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cb8:	d10c      	bne.n	8001cd4 <HAL_RCC_OscConfig+0xbc>
 8001cba:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc4:	6013      	str	r3, [r2, #0]
 8001cc6:	4b6f      	ldr	r3, [pc, #444]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	4a6e      	ldr	r2, [pc, #440]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd0:	6013      	str	r3, [r2, #0]
 8001cd2:	e00b      	b.n	8001cec <HAL_RCC_OscConfig+0xd4>
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	4a6a      	ldr	r2, [pc, #424]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001cde:	6013      	str	r3, [r2, #0]
 8001ce0:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a67      	ldr	r2, [pc, #412]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d013      	beq.n	8001d1c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cf4:	f7ff fccc 	bl	8001690 <HAL_GetTick>
 8001cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fcc8 	bl	8001690 <HAL_GetTick>
 8001d00:	4602      	mov	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	; 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e1fa      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d0e:	4b5d      	ldr	r3, [pc, #372]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d0f0      	beq.n	8001cfc <HAL_RCC_OscConfig+0xe4>
 8001d1a:	e014      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d1c:	f7ff fcb8 	bl	8001690 <HAL_GetTick>
 8001d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d22:	e008      	b.n	8001d36 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d24:	f7ff fcb4 	bl	8001690 <HAL_GetTick>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	1ad3      	subs	r3, r2, r3
 8001d2e:	2b64      	cmp	r3, #100	; 0x64
 8001d30:	d901      	bls.n	8001d36 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001d32:	2303      	movs	r3, #3
 8001d34:	e1e6      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	4b53      	ldr	r3, [pc, #332]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d1f0      	bne.n	8001d24 <HAL_RCC_OscConfig+0x10c>
 8001d42:	e000      	b.n	8001d46 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d063      	beq.n	8001e1a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001d52:	4b4c      	ldr	r3, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d54:	685b      	ldr	r3, [r3, #4]
 8001d56:	f003 030c 	and.w	r3, r3, #12
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d00b      	beq.n	8001d76 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001d5e:	4b49      	ldr	r3, [pc, #292]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	f003 030c 	and.w	r3, r3, #12
 8001d66:	2b08      	cmp	r3, #8
 8001d68:	d11c      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
 8001d6a:	4b46      	ldr	r3, [pc, #280]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d116      	bne.n	8001da4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d76:	4b43      	ldr	r3, [pc, #268]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f003 0302 	and.w	r3, r3, #2
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d005      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d001      	beq.n	8001d8e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e1ba      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	695b      	ldr	r3, [r3, #20]
 8001d9a:	00db      	lsls	r3, r3, #3
 8001d9c:	4939      	ldr	r1, [pc, #228]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001da2:	e03a      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	691b      	ldr	r3, [r3, #16]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d020      	beq.n	8001dee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dac:	4b36      	ldr	r3, [pc, #216]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001dae:	2201      	movs	r2, #1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001db2:	f7ff fc6d 	bl	8001690 <HAL_GetTick>
 8001db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001db8:	e008      	b.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dba:	f7ff fc69 	bl	8001690 <HAL_GetTick>
 8001dbe:	4602      	mov	r2, r0
 8001dc0:	693b      	ldr	r3, [r7, #16]
 8001dc2:	1ad3      	subs	r3, r2, r3
 8001dc4:	2b02      	cmp	r3, #2
 8001dc6:	d901      	bls.n	8001dcc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dc8:	2303      	movs	r3, #3
 8001dca:	e19b      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dcc:	4b2d      	ldr	r3, [pc, #180]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0302 	and.w	r3, r3, #2
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d0f0      	beq.n	8001dba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001dd8:	4b2a      	ldr	r3, [pc, #168]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	00db      	lsls	r3, r3, #3
 8001de6:	4927      	ldr	r1, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001de8:	4313      	orrs	r3, r2
 8001dea:	600b      	str	r3, [r1, #0]
 8001dec:	e015      	b.n	8001e1a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001dee:	4b26      	ldr	r3, [pc, #152]	; (8001e88 <HAL_RCC_OscConfig+0x270>)
 8001df0:	2200      	movs	r2, #0
 8001df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df4:	f7ff fc4c 	bl	8001690 <HAL_GetTick>
 8001df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001dfa:	e008      	b.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001dfc:	f7ff fc48 	bl	8001690 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	1ad3      	subs	r3, r2, r3
 8001e06:	2b02      	cmp	r3, #2
 8001e08:	d901      	bls.n	8001e0e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001e0a:	2303      	movs	r3, #3
 8001e0c:	e17a      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e0e:	4b1d      	ldr	r3, [pc, #116]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d1f0      	bne.n	8001dfc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0308 	and.w	r3, r3, #8
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d03a      	beq.n	8001e9c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	699b      	ldr	r3, [r3, #24]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d019      	beq.n	8001e62 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e2e:	4b17      	ldr	r3, [pc, #92]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e30:	2201      	movs	r2, #1
 8001e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e34:	f7ff fc2c 	bl	8001690 <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e3c:	f7ff fc28 	bl	8001690 <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e15a      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	; (8001e84 <HAL_RCC_OscConfig+0x26c>)
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f003 0302 	and.w	r3, r3, #2
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d0f0      	beq.n	8001e3c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001e5a:	2001      	movs	r0, #1
 8001e5c:	f000 fa9a 	bl	8002394 <RCC_Delay>
 8001e60:	e01c      	b.n	8001e9c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e62:	4b0a      	ldr	r3, [pc, #40]	; (8001e8c <HAL_RCC_OscConfig+0x274>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e68:	f7ff fc12 	bl	8001690 <HAL_GetTick>
 8001e6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e6e:	e00f      	b.n	8001e90 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001e70:	f7ff fc0e 	bl	8001690 <HAL_GetTick>
 8001e74:	4602      	mov	r2, r0
 8001e76:	693b      	ldr	r3, [r7, #16]
 8001e78:	1ad3      	subs	r3, r2, r3
 8001e7a:	2b02      	cmp	r3, #2
 8001e7c:	d908      	bls.n	8001e90 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001e7e:	2303      	movs	r3, #3
 8001e80:	e140      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	42420000 	.word	0x42420000
 8001e8c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001e90:	4b9e      	ldr	r3, [pc, #632]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d1e9      	bne.n	8001e70 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	f003 0304 	and.w	r3, r3, #4
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 80a6 	beq.w	8001ff6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eae:	4b97      	ldr	r3, [pc, #604]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001eb0:	69db      	ldr	r3, [r3, #28]
 8001eb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d10d      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eba:	4b94      	ldr	r3, [pc, #592]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ebc:	69db      	ldr	r3, [r3, #28]
 8001ebe:	4a93      	ldr	r2, [pc, #588]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ec0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	61d3      	str	r3, [r2, #28]
 8001ec6:	4b91      	ldr	r3, [pc, #580]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ec8:	69db      	ldr	r3, [r3, #28]
 8001eca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ece:	60bb      	str	r3, [r7, #8]
 8001ed0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ed6:	4b8e      	ldr	r3, [pc, #568]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d118      	bne.n	8001f14 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ee2:	4b8b      	ldr	r3, [pc, #556]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	4a8a      	ldr	r2, [pc, #552]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001ee8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001eec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001eee:	f7ff fbcf 	bl	8001690 <HAL_GetTick>
 8001ef2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ef4:	e008      	b.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ef6:	f7ff fbcb 	bl	8001690 <HAL_GetTick>
 8001efa:	4602      	mov	r2, r0
 8001efc:	693b      	ldr	r3, [r7, #16]
 8001efe:	1ad3      	subs	r3, r2, r3
 8001f00:	2b64      	cmp	r3, #100	; 0x64
 8001f02:	d901      	bls.n	8001f08 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8001f04:	2303      	movs	r3, #3
 8001f06:	e0fd      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b81      	ldr	r3, [pc, #516]	; (8002110 <HAL_RCC_OscConfig+0x4f8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d0f0      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	2b01      	cmp	r3, #1
 8001f1a:	d106      	bne.n	8001f2a <HAL_RCC_OscConfig+0x312>
 8001f1c:	4b7b      	ldr	r3, [pc, #492]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f1e:	6a1b      	ldr	r3, [r3, #32]
 8001f20:	4a7a      	ldr	r2, [pc, #488]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f22:	f043 0301 	orr.w	r3, r3, #1
 8001f26:	6213      	str	r3, [r2, #32]
 8001f28:	e02d      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	68db      	ldr	r3, [r3, #12]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x334>
 8001f32:	4b76      	ldr	r3, [pc, #472]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	4a75      	ldr	r2, [pc, #468]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f38:	f023 0301 	bic.w	r3, r3, #1
 8001f3c:	6213      	str	r3, [r2, #32]
 8001f3e:	4b73      	ldr	r3, [pc, #460]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f40:	6a1b      	ldr	r3, [r3, #32]
 8001f42:	4a72      	ldr	r2, [pc, #456]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f44:	f023 0304 	bic.w	r3, r3, #4
 8001f48:	6213      	str	r3, [r2, #32]
 8001f4a:	e01c      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2b05      	cmp	r3, #5
 8001f52:	d10c      	bne.n	8001f6e <HAL_RCC_OscConfig+0x356>
 8001f54:	4b6d      	ldr	r3, [pc, #436]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f56:	6a1b      	ldr	r3, [r3, #32]
 8001f58:	4a6c      	ldr	r2, [pc, #432]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6213      	str	r3, [r2, #32]
 8001f60:	4b6a      	ldr	r3, [pc, #424]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f62:	6a1b      	ldr	r3, [r3, #32]
 8001f64:	4a69      	ldr	r2, [pc, #420]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f66:	f043 0301 	orr.w	r3, r3, #1
 8001f6a:	6213      	str	r3, [r2, #32]
 8001f6c:	e00b      	b.n	8001f86 <HAL_RCC_OscConfig+0x36e>
 8001f6e:	4b67      	ldr	r3, [pc, #412]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f70:	6a1b      	ldr	r3, [r3, #32]
 8001f72:	4a66      	ldr	r2, [pc, #408]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f74:	f023 0301 	bic.w	r3, r3, #1
 8001f78:	6213      	str	r3, [r2, #32]
 8001f7a:	4b64      	ldr	r3, [pc, #400]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f7c:	6a1b      	ldr	r3, [r3, #32]
 8001f7e:	4a63      	ldr	r2, [pc, #396]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001f80:	f023 0304 	bic.w	r3, r3, #4
 8001f84:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d015      	beq.n	8001fba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f8e:	f7ff fb7f 	bl	8001690 <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f96:	f7ff fb7b 	bl	8001690 <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e0ab      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fac:	4b57      	ldr	r3, [pc, #348]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fae:	6a1b      	ldr	r3, [r3, #32]
 8001fb0:	f003 0302 	and.w	r3, r3, #2
 8001fb4:	2b00      	cmp	r3, #0
 8001fb6:	d0ee      	beq.n	8001f96 <HAL_RCC_OscConfig+0x37e>
 8001fb8:	e014      	b.n	8001fe4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fba:	f7ff fb69 	bl	8001690 <HAL_GetTick>
 8001fbe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fc0:	e00a      	b.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fc2:	f7ff fb65 	bl	8001690 <HAL_GetTick>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	693b      	ldr	r3, [r7, #16]
 8001fca:	1ad3      	subs	r3, r2, r3
 8001fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fd0:	4293      	cmp	r3, r2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e095      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001fd8:	4b4c      	ldr	r3, [pc, #304]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fda:	6a1b      	ldr	r3, [r3, #32]
 8001fdc:	f003 0302 	and.w	r3, r3, #2
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d1ee      	bne.n	8001fc2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8001fe4:	7dfb      	ldrb	r3, [r7, #23]
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d105      	bne.n	8001ff6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001fea:	4b48      	ldr	r3, [pc, #288]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	4a47      	ldr	r2, [pc, #284]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8001ff0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ff4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	69db      	ldr	r3, [r3, #28]
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	f000 8081 	beq.w	8002102 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002000:	4b42      	ldr	r3, [pc, #264]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 030c 	and.w	r3, r3, #12
 8002008:	2b08      	cmp	r3, #8
 800200a:	d061      	beq.n	80020d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	69db      	ldr	r3, [r3, #28]
 8002010:	2b02      	cmp	r3, #2
 8002012:	d146      	bne.n	80020a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002014:	4b3f      	ldr	r3, [pc, #252]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 8002016:	2200      	movs	r2, #0
 8002018:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201a:	f7ff fb39 	bl	8001690 <HAL_GetTick>
 800201e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	e008      	b.n	8002034 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002022:	f7ff fb35 	bl	8001690 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	693b      	ldr	r3, [r7, #16]
 800202a:	1ad3      	subs	r3, r2, r3
 800202c:	2b02      	cmp	r3, #2
 800202e:	d901      	bls.n	8002034 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002030:	2303      	movs	r3, #3
 8002032:	e067      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002034:	4b35      	ldr	r3, [pc, #212]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1f0      	bne.n	8002022 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6a1b      	ldr	r3, [r3, #32]
 8002044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002048:	d108      	bne.n	800205c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800204a:	4b30      	ldr	r3, [pc, #192]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	492d      	ldr	r1, [pc, #180]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002058:	4313      	orrs	r3, r2
 800205a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800205c:	4b2b      	ldr	r3, [pc, #172]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6a19      	ldr	r1, [r3, #32]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	430b      	orrs	r3, r1
 800206e:	4927      	ldr	r1, [pc, #156]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002070:	4313      	orrs	r3, r2
 8002072:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002074:	4b27      	ldr	r3, [pc, #156]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 8002076:	2201      	movs	r2, #1
 8002078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800207a:	f7ff fb09 	bl	8001690 <HAL_GetTick>
 800207e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002080:	e008      	b.n	8002094 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002082:	f7ff fb05 	bl	8001690 <HAL_GetTick>
 8002086:	4602      	mov	r2, r0
 8002088:	693b      	ldr	r3, [r7, #16]
 800208a:	1ad3      	subs	r3, r2, r3
 800208c:	2b02      	cmp	r3, #2
 800208e:	d901      	bls.n	8002094 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002090:	2303      	movs	r3, #3
 8002092:	e037      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002094:	4b1d      	ldr	r3, [pc, #116]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800209c:	2b00      	cmp	r3, #0
 800209e:	d0f0      	beq.n	8002082 <HAL_RCC_OscConfig+0x46a>
 80020a0:	e02f      	b.n	8002102 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020a2:	4b1c      	ldr	r3, [pc, #112]	; (8002114 <HAL_RCC_OscConfig+0x4fc>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff faf2 	bl	8001690 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020b0:	f7ff faee 	bl	8001690 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b02      	cmp	r3, #2
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e020      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80020c2:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d1f0      	bne.n	80020b0 <HAL_RCC_OscConfig+0x498>
 80020ce:	e018      	b.n	8002102 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	69db      	ldr	r3, [r3, #28]
 80020d4:	2b01      	cmp	r3, #1
 80020d6:	d101      	bne.n	80020dc <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80020d8:	2301      	movs	r3, #1
 80020da:	e013      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80020dc:	4b0b      	ldr	r3, [pc, #44]	; (800210c <HAL_RCC_OscConfig+0x4f4>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6a1b      	ldr	r3, [r3, #32]
 80020ec:	429a      	cmp	r2, r3
 80020ee:	d106      	bne.n	80020fe <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d001      	beq.n	8002102 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e000      	b.n	8002104 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002102:	2300      	movs	r3, #0
}
 8002104:	4618      	mov	r0, r3
 8002106:	3718      	adds	r7, #24
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40021000 	.word	0x40021000
 8002110:	40007000 	.word	0x40007000
 8002114:	42420060 	.word	0x42420060

08002118 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	b084      	sub	sp, #16
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	e0d0      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800212c:	4b6a      	ldr	r3, [pc, #424]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f003 0307 	and.w	r3, r3, #7
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d910      	bls.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b67      	ldr	r3, [pc, #412]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f023 0207 	bic.w	r2, r3, #7
 8002142:	4965      	ldr	r1, [pc, #404]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	4313      	orrs	r3, r2
 8002148:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800214a:	4b63      	ldr	r3, [pc, #396]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0307 	and.w	r3, r3, #7
 8002152:	683a      	ldr	r2, [r7, #0]
 8002154:	429a      	cmp	r2, r3
 8002156:	d001      	beq.n	800215c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0b8      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d020      	beq.n	80021aa <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f003 0304 	and.w	r3, r3, #4
 8002170:	2b00      	cmp	r3, #0
 8002172:	d005      	beq.n	8002180 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002174:	4b59      	ldr	r3, [pc, #356]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	4a58      	ldr	r2, [pc, #352]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800217a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800217e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0308 	and.w	r3, r3, #8
 8002188:	2b00      	cmp	r3, #0
 800218a:	d005      	beq.n	8002198 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800218c:	4b53      	ldr	r3, [pc, #332]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	4a52      	ldr	r2, [pc, #328]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002192:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002196:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002198:	4b50      	ldr	r3, [pc, #320]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	689b      	ldr	r3, [r3, #8]
 80021a4:	494d      	ldr	r1, [pc, #308]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021a6:	4313      	orrs	r3, r2
 80021a8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	f003 0301 	and.w	r3, r3, #1
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d040      	beq.n	8002238 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d107      	bne.n	80021ce <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80021be:	4b47      	ldr	r3, [pc, #284]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d115      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
 80021cc:	e07f      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d107      	bne.n	80021e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021d6:	4b41      	ldr	r3, [pc, #260]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d109      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e073      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021e6:	4b3d      	ldr	r3, [pc, #244]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0302 	and.w	r3, r3, #2
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d101      	bne.n	80021f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80021f2:	2301      	movs	r3, #1
 80021f4:	e06b      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80021f6:	4b39      	ldr	r3, [pc, #228]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f023 0203 	bic.w	r2, r3, #3
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	4936      	ldr	r1, [pc, #216]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002204:	4313      	orrs	r3, r2
 8002206:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002208:	f7ff fa42 	bl	8001690 <HAL_GetTick>
 800220c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800220e:	e00a      	b.n	8002226 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002210:	f7ff fa3e 	bl	8001690 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	f241 3288 	movw	r2, #5000	; 0x1388
 800221e:	4293      	cmp	r3, r2
 8002220:	d901      	bls.n	8002226 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002222:	2303      	movs	r3, #3
 8002224:	e053      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002226:	4b2d      	ldr	r3, [pc, #180]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	f003 020c 	and.w	r2, r3, #12
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	685b      	ldr	r3, [r3, #4]
 8002232:	009b      	lsls	r3, r3, #2
 8002234:	429a      	cmp	r2, r3
 8002236:	d1eb      	bne.n	8002210 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002238:	4b27      	ldr	r3, [pc, #156]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0307 	and.w	r3, r3, #7
 8002240:	683a      	ldr	r2, [r7, #0]
 8002242:	429a      	cmp	r2, r3
 8002244:	d210      	bcs.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002246:	4b24      	ldr	r3, [pc, #144]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f023 0207 	bic.w	r2, r3, #7
 800224e:	4922      	ldr	r1, [pc, #136]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002256:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x1c0>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0307 	and.w	r3, r3, #7
 800225e:	683a      	ldr	r2, [r7, #0]
 8002260:	429a      	cmp	r2, r3
 8002262:	d001      	beq.n	8002268 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	e032      	b.n	80022ce <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0304 	and.w	r3, r3, #4
 8002270:	2b00      	cmp	r3, #0
 8002272:	d008      	beq.n	8002286 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002274:	4b19      	ldr	r3, [pc, #100]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	68db      	ldr	r3, [r3, #12]
 8002280:	4916      	ldr	r1, [pc, #88]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002282:	4313      	orrs	r3, r2
 8002284:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0308 	and.w	r3, r3, #8
 800228e:	2b00      	cmp	r3, #0
 8002290:	d009      	beq.n	80022a6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002292:	4b12      	ldr	r3, [pc, #72]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	691b      	ldr	r3, [r3, #16]
 800229e:	00db      	lsls	r3, r3, #3
 80022a0:	490e      	ldr	r1, [pc, #56]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80022a6:	f000 f821 	bl	80022ec <HAL_RCC_GetSysClockFreq>
 80022aa:	4602      	mov	r2, r0
 80022ac:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <HAL_RCC_ClockConfig+0x1c4>)
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	091b      	lsrs	r3, r3, #4
 80022b2:	f003 030f 	and.w	r3, r3, #15
 80022b6:	490a      	ldr	r1, [pc, #40]	; (80022e0 <HAL_RCC_ClockConfig+0x1c8>)
 80022b8:	5ccb      	ldrb	r3, [r1, r3]
 80022ba:	fa22 f303 	lsr.w	r3, r2, r3
 80022be:	4a09      	ldr	r2, [pc, #36]	; (80022e4 <HAL_RCC_ClockConfig+0x1cc>)
 80022c0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80022c2:	4b09      	ldr	r3, [pc, #36]	; (80022e8 <HAL_RCC_ClockConfig+0x1d0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff f9a0 	bl	800160c <HAL_InitTick>

  return HAL_OK;
 80022cc:	2300      	movs	r3, #0
}
 80022ce:	4618      	mov	r0, r3
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}
 80022d6:	bf00      	nop
 80022d8:	40022000 	.word	0x40022000
 80022dc:	40021000 	.word	0x40021000
 80022e0:	08002c18 	.word	0x08002c18
 80022e4:	20000024 	.word	0x20000024
 80022e8:	20000028 	.word	0x20000028

080022ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	b087      	sub	sp, #28
 80022f0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	60fb      	str	r3, [r7, #12]
 80022f6:	2300      	movs	r3, #0
 80022f8:	60bb      	str	r3, [r7, #8]
 80022fa:	2300      	movs	r3, #0
 80022fc:	617b      	str	r3, [r7, #20]
 80022fe:	2300      	movs	r3, #0
 8002300:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002302:	2300      	movs	r3, #0
 8002304:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002306:	4b1e      	ldr	r3, [pc, #120]	; (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d002      	beq.n	800231c <HAL_RCC_GetSysClockFreq+0x30>
 8002316:	2b08      	cmp	r3, #8
 8002318:	d003      	beq.n	8002322 <HAL_RCC_GetSysClockFreq+0x36>
 800231a:	e027      	b.n	800236c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800231c:	4b19      	ldr	r3, [pc, #100]	; (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800231e:	613b      	str	r3, [r7, #16]
      break;
 8002320:	e027      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	0c9b      	lsrs	r3, r3, #18
 8002326:	f003 030f 	and.w	r3, r3, #15
 800232a:	4a17      	ldr	r2, [pc, #92]	; (8002388 <HAL_RCC_GetSysClockFreq+0x9c>)
 800232c:	5cd3      	ldrb	r3, [r2, r3]
 800232e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002336:	2b00      	cmp	r3, #0
 8002338:	d010      	beq.n	800235c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <HAL_RCC_GetSysClockFreq+0x94>)
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	0c5b      	lsrs	r3, r3, #17
 8002340:	f003 0301 	and.w	r3, r3, #1
 8002344:	4a11      	ldr	r2, [pc, #68]	; (800238c <HAL_RCC_GetSysClockFreq+0xa0>)
 8002346:	5cd3      	ldrb	r3, [r2, r3]
 8002348:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	4a0d      	ldr	r2, [pc, #52]	; (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800234e:	fb02 f203 	mul.w	r2, r2, r3
 8002352:	68bb      	ldr	r3, [r7, #8]
 8002354:	fbb2 f3f3 	udiv	r3, r2, r3
 8002358:	617b      	str	r3, [r7, #20]
 800235a:	e004      	b.n	8002366 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	4a0c      	ldr	r2, [pc, #48]	; (8002390 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002360:	fb02 f303 	mul.w	r3, r2, r3
 8002364:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	613b      	str	r3, [r7, #16]
      break;
 800236a:	e002      	b.n	8002372 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800236c:	4b05      	ldr	r3, [pc, #20]	; (8002384 <HAL_RCC_GetSysClockFreq+0x98>)
 800236e:	613b      	str	r3, [r7, #16]
      break;
 8002370:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002372:	693b      	ldr	r3, [r7, #16]
}
 8002374:	4618      	mov	r0, r3
 8002376:	371c      	adds	r7, #28
 8002378:	46bd      	mov	sp, r7
 800237a:	bc80      	pop	{r7}
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	40021000 	.word	0x40021000
 8002384:	007a1200 	.word	0x007a1200
 8002388:	08002c28 	.word	0x08002c28
 800238c:	08002c38 	.word	0x08002c38
 8002390:	003d0900 	.word	0x003d0900

08002394 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002394:	b480      	push	{r7}
 8002396:	b085      	sub	sp, #20
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800239c:	4b0a      	ldr	r3, [pc, #40]	; (80023c8 <RCC_Delay+0x34>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a0a      	ldr	r2, [pc, #40]	; (80023cc <RCC_Delay+0x38>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0a5b      	lsrs	r3, r3, #9
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80023b0:	bf00      	nop
  }
  while (Delay --);
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1e5a      	subs	r2, r3, #1
 80023b6:	60fa      	str	r2, [r7, #12]
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d1f9      	bne.n	80023b0 <RCC_Delay+0x1c>
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3714      	adds	r7, #20
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bc80      	pop	{r7}
 80023c6:	4770      	bx	lr
 80023c8:	20000024 	.word	0x20000024
 80023cc:	10624dd3 	.word	0x10624dd3

080023d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80023d0:	b580      	push	{r7, lr}
 80023d2:	b082      	sub	sp, #8
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80023de:	2301      	movs	r3, #1
 80023e0:	e041      	b.n	8002466 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80023e8:	b2db      	uxtb	r3, r3
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	d106      	bne.n	80023fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	2200      	movs	r2, #0
 80023f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff f870 	bl	80014dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2202      	movs	r2, #2
 8002400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681a      	ldr	r2, [r3, #0]
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	3304      	adds	r3, #4
 800240c:	4619      	mov	r1, r3
 800240e:	4610      	mov	r0, r2
 8002410:	f000 fa6e 	bl	80028f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2201      	movs	r2, #1
 8002420:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	2201      	movs	r2, #1
 8002428:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	2201      	movs	r2, #1
 8002430:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	2201      	movs	r2, #1
 8002438:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2201      	movs	r2, #1
 8002440:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2201      	movs	r2, #1
 8002448:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	2201      	movs	r2, #1
 8002450:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002464:	2300      	movs	r3, #0
}
 8002466:	4618      	mov	r0, r3
 8002468:	3708      	adds	r7, #8
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
	...

08002470 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002470:	b480      	push	{r7}
 8002472:	b085      	sub	sp, #20
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800247e:	b2db      	uxtb	r3, r3
 8002480:	2b01      	cmp	r3, #1
 8002482:	d001      	beq.n	8002488 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002484:	2301      	movs	r3, #1
 8002486:	e035      	b.n	80024f4 <HAL_TIM_Base_Start_IT+0x84>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2202      	movs	r2, #2
 800248c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	68da      	ldr	r2, [r3, #12]
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f042 0201 	orr.w	r2, r2, #1
 800249e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a16      	ldr	r2, [pc, #88]	; (8002500 <HAL_TIM_Base_Start_IT+0x90>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d009      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024b2:	d004      	beq.n	80024be <HAL_TIM_Base_Start_IT+0x4e>
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a12      	ldr	r2, [pc, #72]	; (8002504 <HAL_TIM_Base_Start_IT+0x94>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d111      	bne.n	80024e2 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	f003 0307 	and.w	r3, r3, #7
 80024c8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	2b06      	cmp	r3, #6
 80024ce:	d010      	beq.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    {
      __HAL_TIM_ENABLE(htim);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f042 0201 	orr.w	r2, r2, #1
 80024de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80024e0:	e007      	b.n	80024f2 <HAL_TIM_Base_Start_IT+0x82>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	681a      	ldr	r2, [r3, #0]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f042 0201 	orr.w	r2, r2, #1
 80024f0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80024f2:	2300      	movs	r3, #0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	3714      	adds	r7, #20
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bc80      	pop	{r7}
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	40012c00 	.word	0x40012c00
 8002504:	40000400 	.word	0x40000400

08002508 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	b082      	sub	sp, #8
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	691b      	ldr	r3, [r3, #16]
 8002516:	f003 0302 	and.w	r3, r3, #2
 800251a:	2b02      	cmp	r3, #2
 800251c:	d122      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	68db      	ldr	r3, [r3, #12]
 8002524:	f003 0302 	and.w	r3, r3, #2
 8002528:	2b02      	cmp	r3, #2
 800252a:	d11b      	bne.n	8002564 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f06f 0202 	mvn.w	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2201      	movs	r2, #1
 800253a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	699b      	ldr	r3, [r3, #24]
 8002542:	f003 0303 	and.w	r3, r3, #3
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800254a:	6878      	ldr	r0, [r7, #4]
 800254c:	f000 f9b4 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 8002550:	e005      	b.n	800255e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002552:	6878      	ldr	r0, [r7, #4]
 8002554:	f000 f9a7 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f000 f9b6 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	2200      	movs	r2, #0
 8002562:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	691b      	ldr	r3, [r3, #16]
 800256a:	f003 0304 	and.w	r3, r3, #4
 800256e:	2b04      	cmp	r3, #4
 8002570:	d122      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	f003 0304 	and.w	r3, r3, #4
 800257c:	2b04      	cmp	r3, #4
 800257e:	d11b      	bne.n	80025b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f06f 0204 	mvn.w	r2, #4
 8002588:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	2202      	movs	r2, #2
 800258e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	699b      	ldr	r3, [r3, #24]
 8002596:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 f98a 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 80025a4:	e005      	b.n	80025b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f000 f97d 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025ac:	6878      	ldr	r0, [r7, #4]
 80025ae:	f000 f98c 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	2200      	movs	r2, #0
 80025b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	691b      	ldr	r3, [r3, #16]
 80025be:	f003 0308 	and.w	r3, r3, #8
 80025c2:	2b08      	cmp	r3, #8
 80025c4:	d122      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68db      	ldr	r3, [r3, #12]
 80025cc:	f003 0308 	and.w	r3, r3, #8
 80025d0:	2b08      	cmp	r3, #8
 80025d2:	d11b      	bne.n	800260c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f06f 0208 	mvn.w	r2, #8
 80025dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2204      	movs	r2, #4
 80025e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	69db      	ldr	r3, [r3, #28]
 80025ea:	f003 0303 	and.w	r3, r3, #3
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d003      	beq.n	80025fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80025f2:	6878      	ldr	r0, [r7, #4]
 80025f4:	f000 f960 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 80025f8:	e005      	b.n	8002606 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80025fa:	6878      	ldr	r0, [r7, #4]
 80025fc:	f000 f953 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f962 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	2200      	movs	r2, #0
 800260a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	691b      	ldr	r3, [r3, #16]
 8002612:	f003 0310 	and.w	r3, r3, #16
 8002616:	2b10      	cmp	r3, #16
 8002618:	d122      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	f003 0310 	and.w	r3, r3, #16
 8002624:	2b10      	cmp	r3, #16
 8002626:	d11b      	bne.n	8002660 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	f06f 0210 	mvn.w	r2, #16
 8002630:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2208      	movs	r2, #8
 8002636:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	69db      	ldr	r3, [r3, #28]
 800263e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002642:	2b00      	cmp	r3, #0
 8002644:	d003      	beq.n	800264e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002646:	6878      	ldr	r0, [r7, #4]
 8002648:	f000 f936 	bl	80028b8 <HAL_TIM_IC_CaptureCallback>
 800264c:	e005      	b.n	800265a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800264e:	6878      	ldr	r0, [r7, #4]
 8002650:	f000 f929 	bl	80028a6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f000 f938 	bl	80028ca <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2200      	movs	r2, #0
 800265e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	691b      	ldr	r3, [r3, #16]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	2b01      	cmp	r3, #1
 800266c:	d10e      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	f003 0301 	and.w	r3, r3, #1
 8002678:	2b01      	cmp	r3, #1
 800267a:	d107      	bne.n	800268c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f06f 0201 	mvn.w	r2, #1
 8002684:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002686:	6878      	ldr	r0, [r7, #4]
 8002688:	f7fd fee4 	bl	8000454 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	691b      	ldr	r3, [r3, #16]
 8002692:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002696:	2b80      	cmp	r3, #128	; 0x80
 8002698:	d10e      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	68db      	ldr	r3, [r3, #12]
 80026a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026a4:	2b80      	cmp	r3, #128	; 0x80
 80026a6:	d107      	bne.n	80026b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80026b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80026b2:	6878      	ldr	r0, [r7, #4]
 80026b4:	f000 fa6b 	bl	8002b8e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	691b      	ldr	r3, [r3, #16]
 80026be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026c2:	2b40      	cmp	r3, #64	; 0x40
 80026c4:	d10e      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026d0:	2b40      	cmp	r3, #64	; 0x40
 80026d2:	d107      	bne.n	80026e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80026dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f8fc 	bl	80028dc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	691b      	ldr	r3, [r3, #16]
 80026ea:	f003 0320 	and.w	r3, r3, #32
 80026ee:	2b20      	cmp	r3, #32
 80026f0:	d10e      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	68db      	ldr	r3, [r3, #12]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b20      	cmp	r3, #32
 80026fe:	d107      	bne.n	8002710 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f06f 0220 	mvn.w	r2, #32
 8002708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f000 fa36 	bl	8002b7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002722:	2300      	movs	r3, #0
 8002724:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800272c:	2b01      	cmp	r3, #1
 800272e:	d101      	bne.n	8002734 <HAL_TIM_ConfigClockSource+0x1c>
 8002730:	2302      	movs	r3, #2
 8002732:	e0b4      	b.n	800289e <HAL_TIM_ConfigClockSource+0x186>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2202      	movs	r2, #2
 8002740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002752:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002754:	68bb      	ldr	r3, [r7, #8]
 8002756:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800275a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	68ba      	ldr	r2, [r7, #8]
 8002762:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800276c:	d03e      	beq.n	80027ec <HAL_TIM_ConfigClockSource+0xd4>
 800276e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002772:	f200 8087 	bhi.w	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 8002776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800277a:	f000 8086 	beq.w	800288a <HAL_TIM_ConfigClockSource+0x172>
 800277e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002782:	d87f      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 8002784:	2b70      	cmp	r3, #112	; 0x70
 8002786:	d01a      	beq.n	80027be <HAL_TIM_ConfigClockSource+0xa6>
 8002788:	2b70      	cmp	r3, #112	; 0x70
 800278a:	d87b      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 800278c:	2b60      	cmp	r3, #96	; 0x60
 800278e:	d050      	beq.n	8002832 <HAL_TIM_ConfigClockSource+0x11a>
 8002790:	2b60      	cmp	r3, #96	; 0x60
 8002792:	d877      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 8002794:	2b50      	cmp	r3, #80	; 0x50
 8002796:	d03c      	beq.n	8002812 <HAL_TIM_ConfigClockSource+0xfa>
 8002798:	2b50      	cmp	r3, #80	; 0x50
 800279a:	d873      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 800279c:	2b40      	cmp	r3, #64	; 0x40
 800279e:	d058      	beq.n	8002852 <HAL_TIM_ConfigClockSource+0x13a>
 80027a0:	2b40      	cmp	r3, #64	; 0x40
 80027a2:	d86f      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 80027a4:	2b30      	cmp	r3, #48	; 0x30
 80027a6:	d064      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x15a>
 80027a8:	2b30      	cmp	r3, #48	; 0x30
 80027aa:	d86b      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 80027ac:	2b20      	cmp	r3, #32
 80027ae:	d060      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x15a>
 80027b0:	2b20      	cmp	r3, #32
 80027b2:	d867      	bhi.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d05c      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x15a>
 80027b8:	2b10      	cmp	r3, #16
 80027ba:	d05a      	beq.n	8002872 <HAL_TIM_ConfigClockSource+0x15a>
 80027bc:	e062      	b.n	8002884 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6818      	ldr	r0, [r3, #0]
 80027c2:	683b      	ldr	r3, [r7, #0]
 80027c4:	6899      	ldr	r1, [r3, #8]
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	685a      	ldr	r2, [r3, #4]
 80027ca:	683b      	ldr	r3, [r7, #0]
 80027cc:	68db      	ldr	r3, [r3, #12]
 80027ce:	f000 f95e 	bl	8002a8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80027e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68ba      	ldr	r2, [r7, #8]
 80027e8:	609a      	str	r2, [r3, #8]
      break;
 80027ea:	e04f      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6818      	ldr	r0, [r3, #0]
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6899      	ldr	r1, [r3, #8]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	685a      	ldr	r2, [r3, #4]
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	68db      	ldr	r3, [r3, #12]
 80027fc:	f000 f947 	bl	8002a8e <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	689a      	ldr	r2, [r3, #8]
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800280e:	609a      	str	r2, [r3, #8]
      break;
 8002810:	e03c      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6818      	ldr	r0, [r3, #0]
 8002816:	683b      	ldr	r3, [r7, #0]
 8002818:	6859      	ldr	r1, [r3, #4]
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	68db      	ldr	r3, [r3, #12]
 800281e:	461a      	mov	r2, r3
 8002820:	f000 f8be 	bl	80029a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	2150      	movs	r1, #80	; 0x50
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f915 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 8002830:	e02c      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6818      	ldr	r0, [r3, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	6859      	ldr	r1, [r3, #4]
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	461a      	mov	r2, r3
 8002840:	f000 f8dc 	bl	80029fc <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2160      	movs	r1, #96	; 0x60
 800284a:	4618      	mov	r0, r3
 800284c:	f000 f905 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 8002850:	e01c      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6818      	ldr	r0, [r3, #0]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	6859      	ldr	r1, [r3, #4]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	461a      	mov	r2, r3
 8002860:	f000 f89e 	bl	80029a0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	2140      	movs	r1, #64	; 0x40
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f8f5 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 8002870:	e00c      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4619      	mov	r1, r3
 800287c:	4610      	mov	r0, r2
 800287e:	f000 f8ec 	bl	8002a5a <TIM_ITRx_SetConfig>
      break;
 8002882:	e003      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	73fb      	strb	r3, [r7, #15]
      break;
 8002888:	e000      	b.n	800288c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800288a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2200      	movs	r2, #0
 8002898:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800289c:	7bfb      	ldrb	r3, [r7, #15]
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3710      	adds	r7, #16
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd80      	pop	{r7, pc}

080028a6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	bc80      	pop	{r7}
 80028b6:	4770      	bx	lr

080028b8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028b8:	b480      	push	{r7}
 80028ba:	b083      	sub	sp, #12
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028c0:	bf00      	nop
 80028c2:	370c      	adds	r7, #12
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bc80      	pop	{r7}
 80028c8:	4770      	bx	lr

080028ca <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bc80      	pop	{r7}
 80028da:	4770      	bx	lr

080028dc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028e4:	bf00      	nop
 80028e6:	370c      	adds	r7, #12
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bc80      	pop	{r7}
 80028ec:	4770      	bx	lr
	...

080028f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028f0:	b480      	push	{r7}
 80028f2:	b085      	sub	sp, #20
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
 80028f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a25      	ldr	r2, [pc, #148]	; (8002998 <TIM_Base_SetConfig+0xa8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d007      	beq.n	8002918 <TIM_Base_SetConfig+0x28>
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800290e:	d003      	beq.n	8002918 <TIM_Base_SetConfig+0x28>
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <TIM_Base_SetConfig+0xac>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d108      	bne.n	800292a <TIM_Base_SetConfig+0x3a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800291e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	4313      	orrs	r3, r2
 8002928:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a1a      	ldr	r2, [pc, #104]	; (8002998 <TIM_Base_SetConfig+0xa8>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <TIM_Base_SetConfig+0x52>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002938:	d003      	beq.n	8002942 <TIM_Base_SetConfig+0x52>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a17      	ldr	r2, [pc, #92]	; (800299c <TIM_Base_SetConfig+0xac>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d108      	bne.n	8002954 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002948:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800294a:	683b      	ldr	r3, [r7, #0]
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	68fa      	ldr	r2, [r7, #12]
 8002950:	4313      	orrs	r3, r2
 8002952:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	695b      	ldr	r3, [r3, #20]
 800295e:	4313      	orrs	r3, r2
 8002960:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	68fa      	ldr	r2, [r7, #12]
 8002966:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	681a      	ldr	r2, [r3, #0]
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <TIM_Base_SetConfig+0xa8>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d103      	bne.n	8002988 <TIM_Base_SetConfig+0x98>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002980:	683b      	ldr	r3, [r7, #0]
 8002982:	691a      	ldr	r2, [r3, #16]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2201      	movs	r2, #1
 800298c:	615a      	str	r2, [r3, #20]
}
 800298e:	bf00      	nop
 8002990:	3714      	adds	r7, #20
 8002992:	46bd      	mov	sp, r7
 8002994:	bc80      	pop	{r7}
 8002996:	4770      	bx	lr
 8002998:	40012c00 	.word	0x40012c00
 800299c:	40000400 	.word	0x40000400

080029a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029a0:	b480      	push	{r7}
 80029a2:	b087      	sub	sp, #28
 80029a4:	af00      	add	r7, sp, #0
 80029a6:	60f8      	str	r0, [r7, #12]
 80029a8:	60b9      	str	r1, [r7, #8]
 80029aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	6a1b      	ldr	r3, [r3, #32]
 80029b6:	f023 0201 	bic.w	r2, r3, #1
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	699b      	ldr	r3, [r3, #24]
 80029c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029c4:	693b      	ldr	r3, [r7, #16]
 80029c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80029ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	011b      	lsls	r3, r3, #4
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	4313      	orrs	r3, r2
 80029d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80029d6:	697b      	ldr	r3, [r7, #20]
 80029d8:	f023 030a 	bic.w	r3, r3, #10
 80029dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80029de:	697a      	ldr	r2, [r7, #20]
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	4313      	orrs	r3, r2
 80029e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	697a      	ldr	r2, [r7, #20]
 80029f0:	621a      	str	r2, [r3, #32]
}
 80029f2:	bf00      	nop
 80029f4:	371c      	adds	r7, #28
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bc80      	pop	{r7}
 80029fa:	4770      	bx	lr

080029fc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029fc:	b480      	push	{r7}
 80029fe:	b087      	sub	sp, #28
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	60f8      	str	r0, [r7, #12]
 8002a04:	60b9      	str	r1, [r7, #8]
 8002a06:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	6a1b      	ldr	r3, [r3, #32]
 8002a0c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6a1b      	ldr	r3, [r3, #32]
 8002a12:	f023 0210 	bic.w	r2, r3, #16
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	699b      	ldr	r3, [r3, #24]
 8002a1e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a20:	693b      	ldr	r3, [r7, #16]
 8002a22:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002a26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	031b      	lsls	r3, r3, #12
 8002a2c:	693a      	ldr	r2, [r7, #16]
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002a38:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	011b      	lsls	r3, r3, #4
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	4313      	orrs	r3, r2
 8002a42:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	693a      	ldr	r2, [r7, #16]
 8002a48:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	697a      	ldr	r2, [r7, #20]
 8002a4e:	621a      	str	r2, [r3, #32]
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	bc80      	pop	{r7}
 8002a58:	4770      	bx	lr

08002a5a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b085      	sub	sp, #20
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
 8002a62:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a72:	683a      	ldr	r2, [r7, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	f043 0307 	orr.w	r3, r3, #7
 8002a7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	609a      	str	r2, [r3, #8]
}
 8002a84:	bf00      	nop
 8002a86:	3714      	adds	r7, #20
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bc80      	pop	{r7}
 8002a8c:	4770      	bx	lr

08002a8e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a8e:	b480      	push	{r7}
 8002a90:	b087      	sub	sp, #28
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002aa8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	021a      	lsls	r2, r3, #8
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	431a      	orrs	r2, r3
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	697a      	ldr	r2, [r7, #20]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	697a      	ldr	r2, [r7, #20]
 8002ac0:	609a      	str	r2, [r3, #8]
}
 8002ac2:	bf00      	nop
 8002ac4:	371c      	adds	r7, #28
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bc80      	pop	{r7}
 8002aca:	4770      	bx	lr

08002acc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d101      	bne.n	8002ae4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae0:	2302      	movs	r3, #2
 8002ae2:	e041      	b.n	8002b68 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2201      	movs	r2, #1
 8002ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2202      	movs	r2, #2
 8002af0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b0a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	68fa      	ldr	r2, [r7, #12]
 8002b12:	4313      	orrs	r3, r2
 8002b14:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68fa      	ldr	r2, [r7, #12]
 8002b1c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	4a14      	ldr	r2, [pc, #80]	; (8002b74 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d009      	beq.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b30:	d004      	beq.n	8002b3c <HAL_TIMEx_MasterConfigSynchronization+0x70>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	4a10      	ldr	r2, [pc, #64]	; (8002b78 <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 8002b38:	4293      	cmp	r3, r2
 8002b3a:	d10c      	bne.n	8002b56 <HAL_TIMEx_MasterConfigSynchronization+0x8a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b3c:	68bb      	ldr	r3, [r7, #8]
 8002b3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002b42:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	68ba      	ldr	r2, [r7, #8]
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	68ba      	ldr	r2, [r7, #8]
 8002b54:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2201      	movs	r2, #1
 8002b5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	2200      	movs	r2, #0
 8002b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002b66:	2300      	movs	r3, #0
}
 8002b68:	4618      	mov	r0, r3
 8002b6a:	3714      	adds	r7, #20
 8002b6c:	46bd      	mov	sp, r7
 8002b6e:	bc80      	pop	{r7}
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40012c00 	.word	0x40012c00
 8002b78:	40000400 	.word	0x40000400

08002b7c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b84:	bf00      	nop
 8002b86:	370c      	adds	r7, #12
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bc80      	pop	{r7}
 8002b8c:	4770      	bx	lr

08002b8e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b8e:	b480      	push	{r7}
 8002b90:	b083      	sub	sp, #12
 8002b92:	af00      	add	r7, sp, #0
 8002b94:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002b96:	bf00      	nop
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bc80      	pop	{r7}
 8002b9e:	4770      	bx	lr

08002ba0 <__libc_init_array>:
 8002ba0:	b570      	push	{r4, r5, r6, lr}
 8002ba2:	2600      	movs	r6, #0
 8002ba4:	4d0c      	ldr	r5, [pc, #48]	; (8002bd8 <__libc_init_array+0x38>)
 8002ba6:	4c0d      	ldr	r4, [pc, #52]	; (8002bdc <__libc_init_array+0x3c>)
 8002ba8:	1b64      	subs	r4, r4, r5
 8002baa:	10a4      	asrs	r4, r4, #2
 8002bac:	42a6      	cmp	r6, r4
 8002bae:	d109      	bne.n	8002bc4 <__libc_init_array+0x24>
 8002bb0:	f000 f822 	bl	8002bf8 <_init>
 8002bb4:	2600      	movs	r6, #0
 8002bb6:	4d0a      	ldr	r5, [pc, #40]	; (8002be0 <__libc_init_array+0x40>)
 8002bb8:	4c0a      	ldr	r4, [pc, #40]	; (8002be4 <__libc_init_array+0x44>)
 8002bba:	1b64      	subs	r4, r4, r5
 8002bbc:	10a4      	asrs	r4, r4, #2
 8002bbe:	42a6      	cmp	r6, r4
 8002bc0:	d105      	bne.n	8002bce <__libc_init_array+0x2e>
 8002bc2:	bd70      	pop	{r4, r5, r6, pc}
 8002bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bc8:	4798      	blx	r3
 8002bca:	3601      	adds	r6, #1
 8002bcc:	e7ee      	b.n	8002bac <__libc_init_array+0xc>
 8002bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bd2:	4798      	blx	r3
 8002bd4:	3601      	adds	r6, #1
 8002bd6:	e7f2      	b.n	8002bbe <__libc_init_array+0x1e>
 8002bd8:	08002c3c 	.word	0x08002c3c
 8002bdc:	08002c3c 	.word	0x08002c3c
 8002be0:	08002c3c 	.word	0x08002c3c
 8002be4:	08002c40 	.word	0x08002c40

08002be8 <memset>:
 8002be8:	4603      	mov	r3, r0
 8002bea:	4402      	add	r2, r0
 8002bec:	4293      	cmp	r3, r2
 8002bee:	d100      	bne.n	8002bf2 <memset+0xa>
 8002bf0:	4770      	bx	lr
 8002bf2:	f803 1b01 	strb.w	r1, [r3], #1
 8002bf6:	e7f9      	b.n	8002bec <memset+0x4>

08002bf8 <_init>:
 8002bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002bfa:	bf00      	nop
 8002bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002bfe:	bc08      	pop	{r3}
 8002c00:	469e      	mov	lr, r3
 8002c02:	4770      	bx	lr

08002c04 <_fini>:
 8002c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c06:	bf00      	nop
 8002c08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0a:	bc08      	pop	{r3}
 8002c0c:	469e      	mov	lr, r3
 8002c0e:	4770      	bx	lr
